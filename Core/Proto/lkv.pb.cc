// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lkv.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lkv.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lkvrpc {

namespace {

const ::google::protobuf::Descriptor* Key_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Key_reflection_ = NULL;
const ::google::protobuf::Descriptor* Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyValuePair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValuePair_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConsensusType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConsensusType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ConsensusType_OpType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_lkv_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_lkv_2eproto() {
  protobuf_AddDesc_lkv_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lkv.proto");
  GOOGLE_CHECK(file != NULL);
  Key_descriptor_ = file->message_type(0);
  static const int Key_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, buf_),
  };
  Key_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Key_descriptor_,
      Key::default_instance_,
      Key_offsets_,
      -1,
      -1,
      -1,
      sizeof(Key),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, _is_default_instance_));
  Value_descriptor_ = file->message_type(1);
  static const int Value_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, buf_),
  };
  Value_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Value_descriptor_,
      Value::default_instance_,
      Value_offsets_,
      -1,
      -1,
      -1,
      sizeof(Value),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _is_default_instance_));
  KeyValuePair_descriptor_ = file->message_type(2);
  static const int KeyValuePair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, value_),
  };
  KeyValuePair_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeyValuePair_descriptor_,
      KeyValuePair::default_instance_,
      KeyValuePair_offsets_,
      -1,
      -1,
      -1,
      sizeof(KeyValuePair),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, _is_default_instance_));
  ReturnInt_descriptor_ = file->message_type(3);
  static const int ReturnInt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnInt, ret_),
  };
  ReturnInt_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReturnInt_descriptor_,
      ReturnInt::default_instance_,
      ReturnInt_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReturnInt),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnInt, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnInt, _is_default_instance_));
  ConsensusType_descriptor_ = file->message_type(4);
  static const int ConsensusType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusType, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusType, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusType, value_),
  };
  ConsensusType_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConsensusType_descriptor_,
      ConsensusType::default_instance_,
      ConsensusType_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConsensusType),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusType, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusType, _is_default_instance_));
  ConsensusType_OpType_descriptor_ = ConsensusType_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lkv_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Key_descriptor_, &Key::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Value_descriptor_, &Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeyValuePair_descriptor_, &KeyValuePair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReturnInt_descriptor_, &ReturnInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConsensusType_descriptor_, &ConsensusType::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lkv_2eproto() {
  delete Key::default_instance_;
  delete Key_reflection_;
  delete Value::default_instance_;
  delete Value_reflection_;
  delete KeyValuePair::default_instance_;
  delete KeyValuePair_reflection_;
  delete ReturnInt::default_instance_;
  delete ReturnInt_reflection_;
  delete ConsensusType::default_instance_;
  delete ConsensusType_reflection_;
}

void protobuf_AddDesc_lkv_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_lkv_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tlkv.proto\022\006lkvrpc\"\022\n\003Key\022\013\n\003buf\030\001 \001(\t\""
    "\024\n\005Value\022\013\n\003buf\030\001 \001(\t\"F\n\014KeyValuePair\022\030\n"
    "\003key\030\001 \001(\0132\013.lkvrpc.Key\022\034\n\005value\030\002 \001(\0132\r"
    ".lkvrpc.Value\"\030\n\tReturnInt\022\013\n\003ret\030\001 \001(\005\""
    "\203\001\n\rConsensusType\022(\n\002op\030\001 \001(\0162\034.lkvrpc.C"
    "onsensusType.OpType\022\013\n\003key\030\002 \001(\t\022\r\n\005valu"
    "e\030\003 \001(\t\",\n\006OpType\022\n\n\006OP_GET\020\000\022\n\n\006OP_PUT\020"
    "\001\022\n\n\006OP_DEL\020\0022\210\001\n\003LKV\022#\n\003Get\022\013.lkvrpc.Ke"
    "y\032\r.lkvrpc.Value\"\000\0220\n\003Put\022\024.lkvrpc.KeyVa"
    "luePair\032\021.lkvrpc.ReturnInt\"\000\022*\n\006Delete\022\013"
    ".lkvrpc.Key\032\021.lkvrpc.ReturnInt\"\000b\006proto3", 440);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lkv.proto", &protobuf_RegisterTypes);
  Key::default_instance_ = new Key();
  Value::default_instance_ = new Value();
  KeyValuePair::default_instance_ = new KeyValuePair();
  ReturnInt::default_instance_ = new ReturnInt();
  ConsensusType::default_instance_ = new ConsensusType();
  Key::default_instance_->InitAsDefaultInstance();
  Value::default_instance_->InitAsDefaultInstance();
  KeyValuePair::default_instance_->InitAsDefaultInstance();
  ReturnInt::default_instance_->InitAsDefaultInstance();
  ConsensusType::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lkv_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lkv_2eproto {
  StaticDescriptorInitializer_lkv_2eproto() {
    protobuf_AddDesc_lkv_2eproto();
  }
} static_descriptor_initializer_lkv_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Key::kBufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Key::Key()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lkvrpc.Key)
}

void Key::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Key::Key(const Key& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lkvrpc.Key)
}

void Key::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Key::~Key() {
  // @@protoc_insertion_point(destructor:lkvrpc.Key)
  SharedDtor();
}

void Key::SharedDtor() {
  buf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Key::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Key_descriptor_;
}

const Key& Key::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkv_2eproto();
  return *default_instance_;
}

Key* Key::default_instance_ = NULL;

Key* Key::New(::google::protobuf::Arena* arena) const {
  Key* n = new Key;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Key::Clear() {
// @@protoc_insertion_point(message_clear_start:lkvrpc.Key)
  buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lkvrpc.Key)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string buf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->buf().data(), this->buf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lkvrpc.Key.buf"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lkvrpc.Key)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lkvrpc.Key)
  return false;
#undef DO_
}

void Key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lkvrpc.Key)
  // optional string buf = 1;
  if (this->buf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->buf().data(), this->buf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lkvrpc.Key.buf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->buf(), output);
  }

  // @@protoc_insertion_point(serialize_end:lkvrpc.Key)
}

::google::protobuf::uint8* Key::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lkvrpc.Key)
  // optional string buf = 1;
  if (this->buf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->buf().data(), this->buf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lkvrpc.Key.buf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->buf(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lkvrpc.Key)
  return target;
}

int Key::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lkvrpc.Key)
  int total_size = 0;

  // optional string buf = 1;
  if (this->buf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->buf());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Key::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lkvrpc.Key)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Key* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Key>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lkvrpc.Key)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lkvrpc.Key)
    MergeFrom(*source);
  }
}

void Key::MergeFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lkvrpc.Key)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.buf().size() > 0) {

    buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buf_);
  }
}

void Key::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lkvrpc.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Key::CopyFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lkvrpc.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Key::IsInitialized() const {

  return true;
}

void Key::Swap(Key* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Key::InternalSwap(Key* other) {
  buf_.Swap(&other->buf_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Key::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Key_descriptor_;
  metadata.reflection = Key_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Key

// optional string buf = 1;
void Key::clear_buf() {
  buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Key::buf() const {
  // @@protoc_insertion_point(field_get:lkvrpc.Key.buf)
  return buf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Key::set_buf(const ::std::string& value) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lkvrpc.Key.buf)
}
 void Key::set_buf(const char* value) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lkvrpc.Key.buf)
}
 void Key::set_buf(const char* value, size_t size) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lkvrpc.Key.buf)
}
 ::std::string* Key::mutable_buf() {
  
  // @@protoc_insertion_point(field_mutable:lkvrpc.Key.buf)
  return buf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Key::release_buf() {
  // @@protoc_insertion_point(field_release:lkvrpc.Key.buf)
  
  return buf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Key::set_allocated_buf(::std::string* buf) {
  if (buf != NULL) {
    
  } else {
    
  }
  buf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buf);
  // @@protoc_insertion_point(field_set_allocated:lkvrpc.Key.buf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value::kBufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value::Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lkvrpc.Value)
}

void Value::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Value::Value(const Value& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lkvrpc.Value)
}

void Value::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:lkvrpc.Value)
  SharedDtor();
}

void Value::SharedDtor() {
  buf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Value_descriptor_;
}

const Value& Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkv_2eproto();
  return *default_instance_;
}

Value* Value::default_instance_ = NULL;

Value* Value::New(::google::protobuf::Arena* arena) const {
  Value* n = new Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:lkvrpc.Value)
  buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lkvrpc.Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string buf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->buf().data(), this->buf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lkvrpc.Value.buf"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lkvrpc.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lkvrpc.Value)
  return false;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lkvrpc.Value)
  // optional string buf = 1;
  if (this->buf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->buf().data(), this->buf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lkvrpc.Value.buf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->buf(), output);
  }

  // @@protoc_insertion_point(serialize_end:lkvrpc.Value)
}

::google::protobuf::uint8* Value::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lkvrpc.Value)
  // optional string buf = 1;
  if (this->buf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->buf().data(), this->buf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lkvrpc.Value.buf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->buf(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lkvrpc.Value)
  return target;
}

int Value::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lkvrpc.Value)
  int total_size = 0;

  // optional string buf = 1;
  if (this->buf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->buf());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lkvrpc.Value)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Value* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Value>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lkvrpc.Value)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lkvrpc.Value)
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lkvrpc.Value)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.buf().size() > 0) {

    buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buf_);
  }
}

void Value::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lkvrpc.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lkvrpc.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {

  return true;
}

void Value::Swap(Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value::InternalSwap(Value* other) {
  buf_.Swap(&other->buf_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Value_descriptor_;
  metadata.reflection = Value_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Value

// optional string buf = 1;
void Value::clear_buf() {
  buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Value::buf() const {
  // @@protoc_insertion_point(field_get:lkvrpc.Value.buf)
  return buf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Value::set_buf(const ::std::string& value) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lkvrpc.Value.buf)
}
 void Value::set_buf(const char* value) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lkvrpc.Value.buf)
}
 void Value::set_buf(const char* value, size_t size) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lkvrpc.Value.buf)
}
 ::std::string* Value::mutable_buf() {
  
  // @@protoc_insertion_point(field_mutable:lkvrpc.Value.buf)
  return buf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Value::release_buf() {
  // @@protoc_insertion_point(field_release:lkvrpc.Value.buf)
  
  return buf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Value::set_allocated_buf(::std::string* buf) {
  if (buf != NULL) {
    
  } else {
    
  }
  buf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buf);
  // @@protoc_insertion_point(field_set_allocated:lkvrpc.Value.buf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyValuePair::kKeyFieldNumber;
const int KeyValuePair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyValuePair::KeyValuePair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lkvrpc.KeyValuePair)
}

void KeyValuePair::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  key_ = const_cast< ::lkvrpc::Key*>(&::lkvrpc::Key::default_instance());
  value_ = const_cast< ::lkvrpc::Value*>(&::lkvrpc::Value::default_instance());
}

KeyValuePair::KeyValuePair(const KeyValuePair& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lkvrpc.KeyValuePair)
}

void KeyValuePair::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  key_ = NULL;
  value_ = NULL;
}

KeyValuePair::~KeyValuePair() {
  // @@protoc_insertion_point(destructor:lkvrpc.KeyValuePair)
  SharedDtor();
}

void KeyValuePair::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
    delete value_;
  }
}

void KeyValuePair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValuePair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValuePair_descriptor_;
}

const KeyValuePair& KeyValuePair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkv_2eproto();
  return *default_instance_;
}

KeyValuePair* KeyValuePair::default_instance_ = NULL;

KeyValuePair* KeyValuePair::New(::google::protobuf::Arena* arena) const {
  KeyValuePair* n = new KeyValuePair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyValuePair::Clear() {
// @@protoc_insertion_point(message_clear_start:lkvrpc.KeyValuePair)
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}

bool KeyValuePair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lkvrpc.KeyValuePair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lkvrpc.Key key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .lkvrpc.Value value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lkvrpc.KeyValuePair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lkvrpc.KeyValuePair)
  return false;
#undef DO_
}

void KeyValuePair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lkvrpc.KeyValuePair)
  // optional .lkvrpc.Key key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->key_, output);
  }

  // optional .lkvrpc.Value value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  // @@protoc_insertion_point(serialize_end:lkvrpc.KeyValuePair)
}

::google::protobuf::uint8* KeyValuePair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lkvrpc.KeyValuePair)
  // optional .lkvrpc.Key key = 1;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->key_, false, target);
  }

  // optional .lkvrpc.Value value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lkvrpc.KeyValuePair)
  return target;
}

int KeyValuePair::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lkvrpc.KeyValuePair)
  int total_size = 0;

  // optional .lkvrpc.Key key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // optional .lkvrpc.Value value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValuePair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lkvrpc.KeyValuePair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KeyValuePair* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyValuePair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lkvrpc.KeyValuePair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lkvrpc.KeyValuePair)
    MergeFrom(*source);
  }
}

void KeyValuePair::MergeFrom(const KeyValuePair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lkvrpc.KeyValuePair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_key()) {
    mutable_key()->::lkvrpc::Key::MergeFrom(from.key());
  }
  if (from.has_value()) {
    mutable_value()->::lkvrpc::Value::MergeFrom(from.value());
  }
}

void KeyValuePair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lkvrpc.KeyValuePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValuePair::CopyFrom(const KeyValuePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lkvrpc.KeyValuePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValuePair::IsInitialized() const {

  return true;
}

void KeyValuePair::Swap(KeyValuePair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyValuePair::InternalSwap(KeyValuePair* other) {
  std::swap(key_, other->key_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyValuePair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValuePair_descriptor_;
  metadata.reflection = KeyValuePair_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyValuePair

// optional .lkvrpc.Key key = 1;
bool KeyValuePair::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void KeyValuePair::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::lkvrpc::Key& KeyValuePair::key() const {
  // @@protoc_insertion_point(field_get:lkvrpc.KeyValuePair.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::lkvrpc::Key* KeyValuePair::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::lkvrpc::Key;
  }
  // @@protoc_insertion_point(field_mutable:lkvrpc.KeyValuePair.key)
  return key_;
}
::lkvrpc::Key* KeyValuePair::release_key() {
  // @@protoc_insertion_point(field_release:lkvrpc.KeyValuePair.key)
  
  ::lkvrpc::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void KeyValuePair::set_allocated_key(::lkvrpc::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lkvrpc.KeyValuePair.key)
}

// optional .lkvrpc.Value value = 2;
bool KeyValuePair::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
void KeyValuePair::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::lkvrpc::Value& KeyValuePair::value() const {
  // @@protoc_insertion_point(field_get:lkvrpc.KeyValuePair.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::lkvrpc::Value* KeyValuePair::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::lkvrpc::Value;
  }
  // @@protoc_insertion_point(field_mutable:lkvrpc.KeyValuePair.value)
  return value_;
}
::lkvrpc::Value* KeyValuePair::release_value() {
  // @@protoc_insertion_point(field_release:lkvrpc.KeyValuePair.value)
  
  ::lkvrpc::Value* temp = value_;
  value_ = NULL;
  return temp;
}
void KeyValuePair::set_allocated_value(::lkvrpc::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lkvrpc.KeyValuePair.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReturnInt::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReturnInt::ReturnInt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lkvrpc.ReturnInt)
}

void ReturnInt::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ReturnInt::ReturnInt(const ReturnInt& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lkvrpc.ReturnInt)
}

void ReturnInt::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  ret_ = 0;
}

ReturnInt::~ReturnInt() {
  // @@protoc_insertion_point(destructor:lkvrpc.ReturnInt)
  SharedDtor();
}

void ReturnInt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReturnInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnInt_descriptor_;
}

const ReturnInt& ReturnInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkv_2eproto();
  return *default_instance_;
}

ReturnInt* ReturnInt::default_instance_ = NULL;

ReturnInt* ReturnInt::New(::google::protobuf::Arena* arena) const {
  ReturnInt* n = new ReturnInt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReturnInt::Clear() {
// @@protoc_insertion_point(message_clear_start:lkvrpc.ReturnInt)
  ret_ = 0;
}

bool ReturnInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lkvrpc.ReturnInt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lkvrpc.ReturnInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lkvrpc.ReturnInt)
  return false;
#undef DO_
}

void ReturnInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lkvrpc.ReturnInt)
  // optional int32 ret = 1;
  if (this->ret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // @@protoc_insertion_point(serialize_end:lkvrpc.ReturnInt)
}

::google::protobuf::uint8* ReturnInt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lkvrpc.ReturnInt)
  // optional int32 ret = 1;
  if (this->ret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lkvrpc.ReturnInt)
  return target;
}

int ReturnInt::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lkvrpc.ReturnInt)
  int total_size = 0;

  // optional int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnInt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lkvrpc.ReturnInt)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReturnInt* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReturnInt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lkvrpc.ReturnInt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lkvrpc.ReturnInt)
    MergeFrom(*source);
  }
}

void ReturnInt::MergeFrom(const ReturnInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lkvrpc.ReturnInt)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void ReturnInt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lkvrpc.ReturnInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnInt::CopyFrom(const ReturnInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lkvrpc.ReturnInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnInt::IsInitialized() const {

  return true;
}

void ReturnInt::Swap(ReturnInt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReturnInt::InternalSwap(ReturnInt* other) {
  std::swap(ret_, other->ret_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReturnInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnInt_descriptor_;
  metadata.reflection = ReturnInt_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReturnInt

// optional int32 ret = 1;
void ReturnInt::clear_ret() {
  ret_ = 0;
}
 ::google::protobuf::int32 ReturnInt::ret() const {
  // @@protoc_insertion_point(field_get:lkvrpc.ReturnInt.ret)
  return ret_;
}
 void ReturnInt::set_ret(::google::protobuf::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:lkvrpc.ReturnInt.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ConsensusType_OpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsensusType_OpType_descriptor_;
}
bool ConsensusType_OpType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConsensusType_OpType ConsensusType::OP_GET;
const ConsensusType_OpType ConsensusType::OP_PUT;
const ConsensusType_OpType ConsensusType::OP_DEL;
const ConsensusType_OpType ConsensusType::OpType_MIN;
const ConsensusType_OpType ConsensusType::OpType_MAX;
const int ConsensusType::OpType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusType::kOpFieldNumber;
const int ConsensusType::kKeyFieldNumber;
const int ConsensusType::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusType::ConsensusType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lkvrpc.ConsensusType)
}

void ConsensusType::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ConsensusType::ConsensusType(const ConsensusType& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lkvrpc.ConsensusType)
}

void ConsensusType::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  op_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ConsensusType::~ConsensusType() {
  // @@protoc_insertion_point(destructor:lkvrpc.ConsensusType)
  SharedDtor();
}

void ConsensusType::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ConsensusType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsensusType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsensusType_descriptor_;
}

const ConsensusType& ConsensusType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkv_2eproto();
  return *default_instance_;
}

ConsensusType* ConsensusType::default_instance_ = NULL;

ConsensusType* ConsensusType::New(::google::protobuf::Arena* arena) const {
  ConsensusType* n = new ConsensusType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConsensusType::Clear() {
// @@protoc_insertion_point(message_clear_start:lkvrpc.ConsensusType)
  op_ = 0;
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ConsensusType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lkvrpc.ConsensusType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lkvrpc.ConsensusType.OpType op = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_op(static_cast< ::lkvrpc::ConsensusType_OpType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lkvrpc.ConsensusType.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional string value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lkvrpc.ConsensusType.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lkvrpc.ConsensusType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lkvrpc.ConsensusType)
  return false;
#undef DO_
}

void ConsensusType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lkvrpc.ConsensusType)
  // optional .lkvrpc.ConsensusType.OpType op = 1;
  if (this->op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // optional string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lkvrpc.ConsensusType.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // optional string value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lkvrpc.ConsensusType.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:lkvrpc.ConsensusType)
}

::google::protobuf::uint8* ConsensusType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lkvrpc.ConsensusType)
  // optional .lkvrpc.ConsensusType.OpType op = 1;
  if (this->op() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // optional string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lkvrpc.ConsensusType.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // optional string value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lkvrpc.ConsensusType.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lkvrpc.ConsensusType)
  return target;
}

int ConsensusType::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lkvrpc.ConsensusType)
  int total_size = 0;

  // optional .lkvrpc.ConsensusType.OpType op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
  }

  // optional string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsensusType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lkvrpc.ConsensusType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConsensusType* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConsensusType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lkvrpc.ConsensusType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lkvrpc.ConsensusType)
    MergeFrom(*source);
  }
}

void ConsensusType::MergeFrom(const ConsensusType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lkvrpc.ConsensusType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.op() != 0) {
    set_op(from.op());
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void ConsensusType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lkvrpc.ConsensusType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusType::CopyFrom(const ConsensusType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lkvrpc.ConsensusType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusType::IsInitialized() const {

  return true;
}

void ConsensusType::Swap(ConsensusType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusType::InternalSwap(ConsensusType* other) {
  std::swap(op_, other->op_);
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConsensusType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConsensusType_descriptor_;
  metadata.reflection = ConsensusType_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConsensusType

// optional .lkvrpc.ConsensusType.OpType op = 1;
void ConsensusType::clear_op() {
  op_ = 0;
}
 ::lkvrpc::ConsensusType_OpType ConsensusType::op() const {
  // @@protoc_insertion_point(field_get:lkvrpc.ConsensusType.op)
  return static_cast< ::lkvrpc::ConsensusType_OpType >(op_);
}
 void ConsensusType::set_op(::lkvrpc::ConsensusType_OpType value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:lkvrpc.ConsensusType.op)
}

// optional string key = 2;
void ConsensusType::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ConsensusType::key() const {
  // @@protoc_insertion_point(field_get:lkvrpc.ConsensusType.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConsensusType::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lkvrpc.ConsensusType.key)
}
 void ConsensusType::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lkvrpc.ConsensusType.key)
}
 void ConsensusType::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lkvrpc.ConsensusType.key)
}
 ::std::string* ConsensusType::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:lkvrpc.ConsensusType.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConsensusType::release_key() {
  // @@protoc_insertion_point(field_release:lkvrpc.ConsensusType.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConsensusType::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:lkvrpc.ConsensusType.key)
}

// optional string value = 3;
void ConsensusType::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ConsensusType::value() const {
  // @@protoc_insertion_point(field_get:lkvrpc.ConsensusType.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConsensusType::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lkvrpc.ConsensusType.value)
}
 void ConsensusType::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lkvrpc.ConsensusType.value)
}
 void ConsensusType::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lkvrpc.ConsensusType.value)
}
 ::std::string* ConsensusType::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:lkvrpc.ConsensusType.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConsensusType::release_value() {
  // @@protoc_insertion_point(field_release:lkvrpc.ConsensusType.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConsensusType::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:lkvrpc.ConsensusType.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lkvrpc

// @@protoc_insertion_point(global_scope)
