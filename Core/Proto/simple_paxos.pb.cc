// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simple_paxos.proto

#include "simple_paxos.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusType_lkv_2eproto;
namespace simplepaxos {
class PrepareRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareRet> _instance;
} _PrepareRet_default_instance_;
class AcceptRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcceptRet> _instance;
} _AcceptRet_default_instance_;
class PrepareDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Prepare> _instance;
} _Prepare_default_instance_;
class AcceptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Accept> _instance;
} _Accept_default_instance_;
class PaxosRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PaxosRecord> _instance;
} _PaxosRecord_default_instance_;
}  // namespace simplepaxos
static void InitDefaultsscc_info_Accept_simple_5fpaxos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::simplepaxos::_Accept_default_instance_;
    new (ptr) ::simplepaxos::Accept();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Accept_simple_5fpaxos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Accept_simple_5fpaxos_2eproto}, {
      &scc_info_ConsensusType_lkv_2eproto.base,}};

static void InitDefaultsscc_info_AcceptRet_simple_5fpaxos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::simplepaxos::_AcceptRet_default_instance_;
    new (ptr) ::simplepaxos::AcceptRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AcceptRet_simple_5fpaxos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AcceptRet_simple_5fpaxos_2eproto}, {}};

static void InitDefaultsscc_info_PaxosRecord_simple_5fpaxos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::simplepaxos::_PaxosRecord_default_instance_;
    new (ptr) ::simplepaxos::PaxosRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PaxosRecord_simple_5fpaxos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PaxosRecord_simple_5fpaxos_2eproto}, {
      &scc_info_ConsensusType_lkv_2eproto.base,}};

static void InitDefaultsscc_info_Prepare_simple_5fpaxos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::simplepaxos::_Prepare_default_instance_;
    new (ptr) ::simplepaxos::Prepare();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Prepare_simple_5fpaxos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Prepare_simple_5fpaxos_2eproto}, {}};

static void InitDefaultsscc_info_PrepareRet_simple_5fpaxos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::simplepaxos::_PrepareRet_default_instance_;
    new (ptr) ::simplepaxos::PrepareRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrepareRet_simple_5fpaxos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrepareRet_simple_5fpaxos_2eproto}, {
      &scc_info_ConsensusType_lkv_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_simple_5fpaxos_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_simple_5fpaxos_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_simple_5fpaxos_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_simple_5fpaxos_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::simplepaxos::PrepareRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::simplepaxos::PrepareRet, instanceid_),
  PROTOBUF_FIELD_OFFSET(::simplepaxos::PrepareRet, proposaln_),
  PROTOBUF_FIELD_OFFSET(::simplepaxos::PrepareRet, acceptern_),
  PROTOBUF_FIELD_OFFSET(::simplepaxos::PrepareRet, accepterv_),
  PROTOBUF_FIELD_OFFSET(::simplepaxos::PrepareRet, isok_),
  PROTOBUF_FIELD_OFFSET(::simplepaxos::PrepareRet, consenus_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::simplepaxos::AcceptRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::simplepaxos::AcceptRet, instanceid_),
  PROTOBUF_FIELD_OFFSET(::simplepaxos::AcceptRet, proposaln_),
  PROTOBUF_FIELD_OFFSET(::simplepaxos::AcceptRet, isok_),
  PROTOBUF_FIELD_OFFSET(::simplepaxos::AcceptRet, consenus_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::simplepaxos::Prepare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::simplepaxos::Prepare, instanceid_),
  PROTOBUF_FIELD_OFFSET(::simplepaxos::Prepare, proposaln_),
  PROTOBUF_FIELD_OFFSET(::simplepaxos::Prepare, consenus_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::simplepaxos::Accept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::simplepaxos::Accept, instanceid_),
  PROTOBUF_FIELD_OFFSET(::simplepaxos::Accept, acceptern_),
  PROTOBUF_FIELD_OFFSET(::simplepaxos::Accept, accepterv_),
  PROTOBUF_FIELD_OFFSET(::simplepaxos::Accept, consenus_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::simplepaxos::PaxosRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::simplepaxos::PaxosRecord, magic_),
  PROTOBUF_FIELD_OFFSET(::simplepaxos::PaxosRecord, instanceid_),
  PROTOBUF_FIELD_OFFSET(::simplepaxos::PaxosRecord, proposaln_),
  PROTOBUF_FIELD_OFFSET(::simplepaxos::PaxosRecord, acceptn_),
  PROTOBUF_FIELD_OFFSET(::simplepaxos::PaxosRecord, accepterv_),
  PROTOBUF_FIELD_OFFSET(::simplepaxos::PaxosRecord, confirm_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::simplepaxos::PrepareRet)},
  { 11, -1, sizeof(::simplepaxos::AcceptRet)},
  { 20, -1, sizeof(::simplepaxos::Prepare)},
  { 28, -1, sizeof(::simplepaxos::Accept)},
  { 37, -1, sizeof(::simplepaxos::PaxosRecord)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::simplepaxos::_PrepareRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::simplepaxos::_AcceptRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::simplepaxos::_Prepare_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::simplepaxos::_Accept_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::simplepaxos::_PaxosRecord_default_instance_),
};

const char descriptor_table_protodef_simple_5fpaxos_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022simple_paxos.proto\022\013simplepaxos\032\tlkv.p"
  "roto\"\226\001\n\nPrepareRet\022\022\n\ninstanceid\030\001 \001(\004\022"
  "\021\n\tproposaln\030\002 \001(\004\022\021\n\tacceptern\030\003 \001(\004\022(\n"
  "\taccepterv\030\004 \001(\0132\025.lkvrpc.ConsensusType\022"
  "\014\n\004isok\030\005 \001(\010\022\026\n\016consenus_group\030\006 \001(\t\"X\n"
  "\tAcceptRet\022\022\n\ninstanceid\030\001 \001(\004\022\021\n\tpropos"
  "aln\030\002 \001(\004\022\014\n\004isok\030\003 \001(\010\022\026\n\016consenus_grou"
  "p\030\004 \001(\t\"H\n\007Prepare\022\022\n\ninstanceid\030\001 \001(\004\022\021"
  "\n\tproposaln\030\002 \001(\004\022\026\n\016consenus_group\030\003 \001("
  "\t\"q\n\006Accept\022\022\n\ninstanceid\030\001 \001(\004\022\021\n\taccep"
  "tern\030\002 \001(\004\022(\n\taccepterv\030\003 \001(\0132\025.lkvrpc.C"
  "onsensusType\022\026\n\016consenus_group\030\004 \001(\t\"\217\001\n"
  "\013PaxosRecord\022\r\n\005magic\030\001 \001(\004\022\022\n\ninstancei"
  "d\030\002 \001(\004\022\021\n\tproposaln\030\003 \001(\004\022\017\n\007acceptn\030\004 "
  "\001(\004\022(\n\taccepterv\030\005 \001(\0132\025.lkvrpc.Consensu"
  "sType\022\017\n\007confirm\030\006 \001(\0102\216\001\n\013SimplePaxos\022="
  "\n\014HandleAccept\022\023.simplepaxos.Accept\032\026.si"
  "mplepaxos.AcceptRet\"\000\022@\n\rHandlePrepare\022\024"
  ".simplepaxos.Prepare\032\027.simplepaxos.Prepa"
  "reRet\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_simple_5fpaxos_2eproto_deps[1] = {
  &::descriptor_table_lkv_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_simple_5fpaxos_2eproto_sccs[5] = {
  &scc_info_Accept_simple_5fpaxos_2eproto.base,
  &scc_info_AcceptRet_simple_5fpaxos_2eproto.base,
  &scc_info_PaxosRecord_simple_5fpaxos_2eproto.base,
  &scc_info_Prepare_simple_5fpaxos_2eproto.base,
  &scc_info_PrepareRet_simple_5fpaxos_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_simple_5fpaxos_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_simple_5fpaxos_2eproto = {
  false, false, descriptor_table_protodef_simple_5fpaxos_2eproto, "simple_paxos.proto", 775,
  &descriptor_table_simple_5fpaxos_2eproto_once, descriptor_table_simple_5fpaxos_2eproto_sccs, descriptor_table_simple_5fpaxos_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_simple_5fpaxos_2eproto::offsets,
  file_level_metadata_simple_5fpaxos_2eproto, 5, file_level_enum_descriptors_simple_5fpaxos_2eproto, file_level_service_descriptors_simple_5fpaxos_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_simple_5fpaxos_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_simple_5fpaxos_2eproto)), true);
namespace simplepaxos {

// ===================================================================

class PrepareRet::_Internal {
 public:
  static const ::lkvrpc::ConsensusType& accepterv(const PrepareRet* msg);
};

const ::lkvrpc::ConsensusType&
PrepareRet::_Internal::accepterv(const PrepareRet* msg) {
  return *msg->accepterv_;
}
void PrepareRet::clear_accepterv() {
  if (GetArena() == nullptr && accepterv_ != nullptr) {
    delete accepterv_;
  }
  accepterv_ = nullptr;
}
PrepareRet::PrepareRet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:simplepaxos.PrepareRet)
}
PrepareRet::PrepareRet(const PrepareRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  consenus_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_consenus_group().empty()) {
    consenus_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_consenus_group(),
      GetArena());
  }
  if (from._internal_has_accepterv()) {
    accepterv_ = new ::lkvrpc::ConsensusType(*from.accepterv_);
  } else {
    accepterv_ = nullptr;
  }
  ::memcpy(&instanceid_, &from.instanceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isok_) -
    reinterpret_cast<char*>(&instanceid_)) + sizeof(isok_));
  // @@protoc_insertion_point(copy_constructor:simplepaxos.PrepareRet)
}

void PrepareRet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareRet_simple_5fpaxos_2eproto.base);
  consenus_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&accepterv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isok_) -
      reinterpret_cast<char*>(&accepterv_)) + sizeof(isok_));
}

PrepareRet::~PrepareRet() {
  // @@protoc_insertion_point(destructor:simplepaxos.PrepareRet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareRet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  consenus_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete accepterv_;
}

void PrepareRet::ArenaDtor(void* object) {
  PrepareRet* _this = reinterpret_cast< PrepareRet* >(object);
  (void)_this;
}
void PrepareRet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareRet& PrepareRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareRet_simple_5fpaxos_2eproto.base);
  return *internal_default_instance();
}


void PrepareRet::Clear() {
// @@protoc_insertion_point(message_clear_start:simplepaxos.PrepareRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  consenus_group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && accepterv_ != nullptr) {
    delete accepterv_;
  }
  accepterv_ = nullptr;
  ::memset(&instanceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isok_) -
      reinterpret_cast<char*>(&instanceid_)) + sizeof(isok_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 instanceid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          instanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 proposaln = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          proposaln_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 acceptern = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          acceptern_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lkvrpc.ConsensusType accepterv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_accepterv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isok = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          isok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string consenus_group = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_consenus_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "simplepaxos.PrepareRet.consenus_group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareRet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:simplepaxos.PrepareRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 instanceid = 1;
  if (this->instanceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_instanceid(), target);
  }

  // uint64 proposaln = 2;
  if (this->proposaln() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_proposaln(), target);
  }

  // uint64 acceptern = 3;
  if (this->acceptern() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_acceptern(), target);
  }

  // .lkvrpc.ConsensusType accepterv = 4;
  if (this->has_accepterv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::accepterv(this), target, stream);
  }

  // bool isok = 5;
  if (this->isok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_isok(), target);
  }

  // string consenus_group = 6;
  if (this->consenus_group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consenus_group().data(), static_cast<int>(this->_internal_consenus_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "simplepaxos.PrepareRet.consenus_group");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_consenus_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simplepaxos.PrepareRet)
  return target;
}

size_t PrepareRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simplepaxos.PrepareRet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string consenus_group = 6;
  if (this->consenus_group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consenus_group());
  }

  // .lkvrpc.ConsensusType accepterv = 4;
  if (this->has_accepterv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accepterv_);
  }

  // uint64 instanceid = 1;
  if (this->instanceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_instanceid());
  }

  // uint64 proposaln = 2;
  if (this->proposaln() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_proposaln());
  }

  // uint64 acceptern = 3;
  if (this->acceptern() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_acceptern());
  }

  // bool isok = 5;
  if (this->isok() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplepaxos.PrepareRet)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplepaxos.PrepareRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplepaxos.PrepareRet)
    MergeFrom(*source);
  }
}

void PrepareRet::MergeFrom(const PrepareRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplepaxos.PrepareRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.consenus_group().size() > 0) {
    _internal_set_consenus_group(from._internal_consenus_group());
  }
  if (from.has_accepterv()) {
    _internal_mutable_accepterv()->::lkvrpc::ConsensusType::MergeFrom(from._internal_accepterv());
  }
  if (from.instanceid() != 0) {
    _internal_set_instanceid(from._internal_instanceid());
  }
  if (from.proposaln() != 0) {
    _internal_set_proposaln(from._internal_proposaln());
  }
  if (from.acceptern() != 0) {
    _internal_set_acceptern(from._internal_acceptern());
  }
  if (from.isok() != 0) {
    _internal_set_isok(from._internal_isok());
  }
}

void PrepareRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplepaxos.PrepareRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareRet::CopyFrom(const PrepareRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplepaxos.PrepareRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareRet::IsInitialized() const {
  return true;
}

void PrepareRet::InternalSwap(PrepareRet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  consenus_group_.Swap(&other->consenus_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrepareRet, isok_)
      + sizeof(PrepareRet::isok_)
      - PROTOBUF_FIELD_OFFSET(PrepareRet, accepterv_)>(
          reinterpret_cast<char*>(&accepterv_),
          reinterpret_cast<char*>(&other->accepterv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AcceptRet::_Internal {
 public:
};

AcceptRet::AcceptRet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:simplepaxos.AcceptRet)
}
AcceptRet::AcceptRet(const AcceptRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  consenus_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_consenus_group().empty()) {
    consenus_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_consenus_group(),
      GetArena());
  }
  ::memcpy(&instanceid_, &from.instanceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isok_) -
    reinterpret_cast<char*>(&instanceid_)) + sizeof(isok_));
  // @@protoc_insertion_point(copy_constructor:simplepaxos.AcceptRet)
}

void AcceptRet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AcceptRet_simple_5fpaxos_2eproto.base);
  consenus_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&instanceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isok_) -
      reinterpret_cast<char*>(&instanceid_)) + sizeof(isok_));
}

AcceptRet::~AcceptRet() {
  // @@protoc_insertion_point(destructor:simplepaxos.AcceptRet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AcceptRet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  consenus_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AcceptRet::ArenaDtor(void* object) {
  AcceptRet* _this = reinterpret_cast< AcceptRet* >(object);
  (void)_this;
}
void AcceptRet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcceptRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcceptRet& AcceptRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcceptRet_simple_5fpaxos_2eproto.base);
  return *internal_default_instance();
}


void AcceptRet::Clear() {
// @@protoc_insertion_point(message_clear_start:simplepaxos.AcceptRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  consenus_group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&instanceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isok_) -
      reinterpret_cast<char*>(&instanceid_)) + sizeof(isok_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcceptRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 instanceid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          instanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 proposaln = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          proposaln_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isok = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          isok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string consenus_group = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_consenus_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "simplepaxos.AcceptRet.consenus_group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcceptRet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:simplepaxos.AcceptRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 instanceid = 1;
  if (this->instanceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_instanceid(), target);
  }

  // uint64 proposaln = 2;
  if (this->proposaln() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_proposaln(), target);
  }

  // bool isok = 3;
  if (this->isok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isok(), target);
  }

  // string consenus_group = 4;
  if (this->consenus_group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consenus_group().data(), static_cast<int>(this->_internal_consenus_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "simplepaxos.AcceptRet.consenus_group");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_consenus_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simplepaxos.AcceptRet)
  return target;
}

size_t AcceptRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simplepaxos.AcceptRet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string consenus_group = 4;
  if (this->consenus_group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consenus_group());
  }

  // uint64 instanceid = 1;
  if (this->instanceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_instanceid());
  }

  // uint64 proposaln = 2;
  if (this->proposaln() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_proposaln());
  }

  // bool isok = 3;
  if (this->isok() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcceptRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplepaxos.AcceptRet)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcceptRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplepaxos.AcceptRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplepaxos.AcceptRet)
    MergeFrom(*source);
  }
}

void AcceptRet::MergeFrom(const AcceptRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplepaxos.AcceptRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.consenus_group().size() > 0) {
    _internal_set_consenus_group(from._internal_consenus_group());
  }
  if (from.instanceid() != 0) {
    _internal_set_instanceid(from._internal_instanceid());
  }
  if (from.proposaln() != 0) {
    _internal_set_proposaln(from._internal_proposaln());
  }
  if (from.isok() != 0) {
    _internal_set_isok(from._internal_isok());
  }
}

void AcceptRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplepaxos.AcceptRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptRet::CopyFrom(const AcceptRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplepaxos.AcceptRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptRet::IsInitialized() const {
  return true;
}

void AcceptRet::InternalSwap(AcceptRet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  consenus_group_.Swap(&other->consenus_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AcceptRet, isok_)
      + sizeof(AcceptRet::isok_)
      - PROTOBUF_FIELD_OFFSET(AcceptRet, instanceid_)>(
          reinterpret_cast<char*>(&instanceid_),
          reinterpret_cast<char*>(&other->instanceid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Prepare::_Internal {
 public:
};

Prepare::Prepare(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:simplepaxos.Prepare)
}
Prepare::Prepare(const Prepare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  consenus_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_consenus_group().empty()) {
    consenus_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_consenus_group(),
      GetArena());
  }
  ::memcpy(&instanceid_, &from.instanceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&proposaln_) -
    reinterpret_cast<char*>(&instanceid_)) + sizeof(proposaln_));
  // @@protoc_insertion_point(copy_constructor:simplepaxos.Prepare)
}

void Prepare::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Prepare_simple_5fpaxos_2eproto.base);
  consenus_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&instanceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proposaln_) -
      reinterpret_cast<char*>(&instanceid_)) + sizeof(proposaln_));
}

Prepare::~Prepare() {
  // @@protoc_insertion_point(destructor:simplepaxos.Prepare)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Prepare::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  consenus_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Prepare::ArenaDtor(void* object) {
  Prepare* _this = reinterpret_cast< Prepare* >(object);
  (void)_this;
}
void Prepare::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Prepare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Prepare& Prepare::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Prepare_simple_5fpaxos_2eproto.base);
  return *internal_default_instance();
}


void Prepare::Clear() {
// @@protoc_insertion_point(message_clear_start:simplepaxos.Prepare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  consenus_group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&instanceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proposaln_) -
      reinterpret_cast<char*>(&instanceid_)) + sizeof(proposaln_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Prepare::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 instanceid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          instanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 proposaln = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          proposaln_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string consenus_group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_consenus_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "simplepaxos.Prepare.consenus_group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Prepare::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:simplepaxos.Prepare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 instanceid = 1;
  if (this->instanceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_instanceid(), target);
  }

  // uint64 proposaln = 2;
  if (this->proposaln() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_proposaln(), target);
  }

  // string consenus_group = 3;
  if (this->consenus_group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consenus_group().data(), static_cast<int>(this->_internal_consenus_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "simplepaxos.Prepare.consenus_group");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_consenus_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simplepaxos.Prepare)
  return target;
}

size_t Prepare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simplepaxos.Prepare)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string consenus_group = 3;
  if (this->consenus_group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consenus_group());
  }

  // uint64 instanceid = 1;
  if (this->instanceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_instanceid());
  }

  // uint64 proposaln = 2;
  if (this->proposaln() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_proposaln());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Prepare::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplepaxos.Prepare)
  GOOGLE_DCHECK_NE(&from, this);
  const Prepare* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Prepare>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplepaxos.Prepare)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplepaxos.Prepare)
    MergeFrom(*source);
  }
}

void Prepare::MergeFrom(const Prepare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplepaxos.Prepare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.consenus_group().size() > 0) {
    _internal_set_consenus_group(from._internal_consenus_group());
  }
  if (from.instanceid() != 0) {
    _internal_set_instanceid(from._internal_instanceid());
  }
  if (from.proposaln() != 0) {
    _internal_set_proposaln(from._internal_proposaln());
  }
}

void Prepare::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplepaxos.Prepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prepare::CopyFrom(const Prepare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplepaxos.Prepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prepare::IsInitialized() const {
  return true;
}

void Prepare::InternalSwap(Prepare* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  consenus_group_.Swap(&other->consenus_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Prepare, proposaln_)
      + sizeof(Prepare::proposaln_)
      - PROTOBUF_FIELD_OFFSET(Prepare, instanceid_)>(
          reinterpret_cast<char*>(&instanceid_),
          reinterpret_cast<char*>(&other->instanceid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Prepare::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Accept::_Internal {
 public:
  static const ::lkvrpc::ConsensusType& accepterv(const Accept* msg);
};

const ::lkvrpc::ConsensusType&
Accept::_Internal::accepterv(const Accept* msg) {
  return *msg->accepterv_;
}
void Accept::clear_accepterv() {
  if (GetArena() == nullptr && accepterv_ != nullptr) {
    delete accepterv_;
  }
  accepterv_ = nullptr;
}
Accept::Accept(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:simplepaxos.Accept)
}
Accept::Accept(const Accept& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  consenus_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_consenus_group().empty()) {
    consenus_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_consenus_group(),
      GetArena());
  }
  if (from._internal_has_accepterv()) {
    accepterv_ = new ::lkvrpc::ConsensusType(*from.accepterv_);
  } else {
    accepterv_ = nullptr;
  }
  ::memcpy(&instanceid_, &from.instanceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&acceptern_) -
    reinterpret_cast<char*>(&instanceid_)) + sizeof(acceptern_));
  // @@protoc_insertion_point(copy_constructor:simplepaxos.Accept)
}

void Accept::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Accept_simple_5fpaxos_2eproto.base);
  consenus_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&accepterv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceptern_) -
      reinterpret_cast<char*>(&accepterv_)) + sizeof(acceptern_));
}

Accept::~Accept() {
  // @@protoc_insertion_point(destructor:simplepaxos.Accept)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Accept::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  consenus_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete accepterv_;
}

void Accept::ArenaDtor(void* object) {
  Accept* _this = reinterpret_cast< Accept* >(object);
  (void)_this;
}
void Accept::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Accept::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Accept& Accept::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Accept_simple_5fpaxos_2eproto.base);
  return *internal_default_instance();
}


void Accept::Clear() {
// @@protoc_insertion_point(message_clear_start:simplepaxos.Accept)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  consenus_group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && accepterv_ != nullptr) {
    delete accepterv_;
  }
  accepterv_ = nullptr;
  ::memset(&instanceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceptern_) -
      reinterpret_cast<char*>(&instanceid_)) + sizeof(acceptern_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Accept::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 instanceid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          instanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 acceptern = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          acceptern_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lkvrpc.ConsensusType accepterv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_accepterv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string consenus_group = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_consenus_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "simplepaxos.Accept.consenus_group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Accept::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:simplepaxos.Accept)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 instanceid = 1;
  if (this->instanceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_instanceid(), target);
  }

  // uint64 acceptern = 2;
  if (this->acceptern() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_acceptern(), target);
  }

  // .lkvrpc.ConsensusType accepterv = 3;
  if (this->has_accepterv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::accepterv(this), target, stream);
  }

  // string consenus_group = 4;
  if (this->consenus_group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consenus_group().data(), static_cast<int>(this->_internal_consenus_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "simplepaxos.Accept.consenus_group");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_consenus_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simplepaxos.Accept)
  return target;
}

size_t Accept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simplepaxos.Accept)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string consenus_group = 4;
  if (this->consenus_group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consenus_group());
  }

  // .lkvrpc.ConsensusType accepterv = 3;
  if (this->has_accepterv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accepterv_);
  }

  // uint64 instanceid = 1;
  if (this->instanceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_instanceid());
  }

  // uint64 acceptern = 2;
  if (this->acceptern() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_acceptern());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Accept::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplepaxos.Accept)
  GOOGLE_DCHECK_NE(&from, this);
  const Accept* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Accept>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplepaxos.Accept)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplepaxos.Accept)
    MergeFrom(*source);
  }
}

void Accept::MergeFrom(const Accept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplepaxos.Accept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.consenus_group().size() > 0) {
    _internal_set_consenus_group(from._internal_consenus_group());
  }
  if (from.has_accepterv()) {
    _internal_mutable_accepterv()->::lkvrpc::ConsensusType::MergeFrom(from._internal_accepterv());
  }
  if (from.instanceid() != 0) {
    _internal_set_instanceid(from._internal_instanceid());
  }
  if (from.acceptern() != 0) {
    _internal_set_acceptern(from._internal_acceptern());
  }
}

void Accept::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplepaxos.Accept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Accept::CopyFrom(const Accept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplepaxos.Accept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accept::IsInitialized() const {
  return true;
}

void Accept::InternalSwap(Accept* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  consenus_group_.Swap(&other->consenus_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Accept, acceptern_)
      + sizeof(Accept::acceptern_)
      - PROTOBUF_FIELD_OFFSET(Accept, accepterv_)>(
          reinterpret_cast<char*>(&accepterv_),
          reinterpret_cast<char*>(&other->accepterv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Accept::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PaxosRecord::_Internal {
 public:
  static const ::lkvrpc::ConsensusType& accepterv(const PaxosRecord* msg);
};

const ::lkvrpc::ConsensusType&
PaxosRecord::_Internal::accepterv(const PaxosRecord* msg) {
  return *msg->accepterv_;
}
void PaxosRecord::clear_accepterv() {
  if (GetArena() == nullptr && accepterv_ != nullptr) {
    delete accepterv_;
  }
  accepterv_ = nullptr;
}
PaxosRecord::PaxosRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:simplepaxos.PaxosRecord)
}
PaxosRecord::PaxosRecord(const PaxosRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_accepterv()) {
    accepterv_ = new ::lkvrpc::ConsensusType(*from.accepterv_);
  } else {
    accepterv_ = nullptr;
  }
  ::memcpy(&magic_, &from.magic_,
    static_cast<size_t>(reinterpret_cast<char*>(&confirm_) -
    reinterpret_cast<char*>(&magic_)) + sizeof(confirm_));
  // @@protoc_insertion_point(copy_constructor:simplepaxos.PaxosRecord)
}

void PaxosRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PaxosRecord_simple_5fpaxos_2eproto.base);
  ::memset(&accepterv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confirm_) -
      reinterpret_cast<char*>(&accepterv_)) + sizeof(confirm_));
}

PaxosRecord::~PaxosRecord() {
  // @@protoc_insertion_point(destructor:simplepaxos.PaxosRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PaxosRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete accepterv_;
}

void PaxosRecord::ArenaDtor(void* object) {
  PaxosRecord* _this = reinterpret_cast< PaxosRecord* >(object);
  (void)_this;
}
void PaxosRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PaxosRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PaxosRecord& PaxosRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PaxosRecord_simple_5fpaxos_2eproto.base);
  return *internal_default_instance();
}


void PaxosRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:simplepaxos.PaxosRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && accepterv_ != nullptr) {
    delete accepterv_;
  }
  accepterv_ = nullptr;
  ::memset(&magic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confirm_) -
      reinterpret_cast<char*>(&magic_)) + sizeof(confirm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaxosRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 magic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 instanceid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          instanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 proposaln = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          proposaln_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 acceptn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          acceptn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lkvrpc.ConsensusType accepterv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_accepterv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool confirm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          confirm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PaxosRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:simplepaxos.PaxosRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 magic = 1;
  if (this->magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_magic(), target);
  }

  // uint64 instanceid = 2;
  if (this->instanceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_instanceid(), target);
  }

  // uint64 proposaln = 3;
  if (this->proposaln() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_proposaln(), target);
  }

  // uint64 acceptn = 4;
  if (this->acceptn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_acceptn(), target);
  }

  // .lkvrpc.ConsensusType accepterv = 5;
  if (this->has_accepterv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::accepterv(this), target, stream);
  }

  // bool confirm = 6;
  if (this->confirm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_confirm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simplepaxos.PaxosRecord)
  return target;
}

size_t PaxosRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simplepaxos.PaxosRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lkvrpc.ConsensusType accepterv = 5;
  if (this->has_accepterv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accepterv_);
  }

  // uint64 magic = 1;
  if (this->magic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_magic());
  }

  // uint64 instanceid = 2;
  if (this->instanceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_instanceid());
  }

  // uint64 proposaln = 3;
  if (this->proposaln() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_proposaln());
  }

  // uint64 acceptn = 4;
  if (this->acceptn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_acceptn());
  }

  // bool confirm = 6;
  if (this->confirm() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PaxosRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplepaxos.PaxosRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const PaxosRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PaxosRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplepaxos.PaxosRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplepaxos.PaxosRecord)
    MergeFrom(*source);
  }
}

void PaxosRecord::MergeFrom(const PaxosRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplepaxos.PaxosRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_accepterv()) {
    _internal_mutable_accepterv()->::lkvrpc::ConsensusType::MergeFrom(from._internal_accepterv());
  }
  if (from.magic() != 0) {
    _internal_set_magic(from._internal_magic());
  }
  if (from.instanceid() != 0) {
    _internal_set_instanceid(from._internal_instanceid());
  }
  if (from.proposaln() != 0) {
    _internal_set_proposaln(from._internal_proposaln());
  }
  if (from.acceptn() != 0) {
    _internal_set_acceptn(from._internal_acceptn());
  }
  if (from.confirm() != 0) {
    _internal_set_confirm(from._internal_confirm());
  }
}

void PaxosRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplepaxos.PaxosRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaxosRecord::CopyFrom(const PaxosRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplepaxos.PaxosRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaxosRecord::IsInitialized() const {
  return true;
}

void PaxosRecord::InternalSwap(PaxosRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PaxosRecord, confirm_)
      + sizeof(PaxosRecord::confirm_)
      - PROTOBUF_FIELD_OFFSET(PaxosRecord, accepterv_)>(
          reinterpret_cast<char*>(&accepterv_),
          reinterpret_cast<char*>(&other->accepterv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PaxosRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace simplepaxos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::simplepaxos::PrepareRet* Arena::CreateMaybeMessage< ::simplepaxos::PrepareRet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::simplepaxos::PrepareRet >(arena);
}
template<> PROTOBUF_NOINLINE ::simplepaxos::AcceptRet* Arena::CreateMaybeMessage< ::simplepaxos::AcceptRet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::simplepaxos::AcceptRet >(arena);
}
template<> PROTOBUF_NOINLINE ::simplepaxos::Prepare* Arena::CreateMaybeMessage< ::simplepaxos::Prepare >(Arena* arena) {
  return Arena::CreateMessageInternal< ::simplepaxos::Prepare >(arena);
}
template<> PROTOBUF_NOINLINE ::simplepaxos::Accept* Arena::CreateMaybeMessage< ::simplepaxos::Accept >(Arena* arena) {
  return Arena::CreateMessageInternal< ::simplepaxos::Accept >(arena);
}
template<> PROTOBUF_NOINLINE ::simplepaxos::PaxosRecord* Arena::CreateMaybeMessage< ::simplepaxos::PaxosRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::simplepaxos::PaxosRecord >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
