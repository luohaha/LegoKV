// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simple_paxos.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "simple_paxos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace simplepaxos {

namespace {

const ::google::protobuf::Descriptor* PrepareRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepareRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcceptRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Prepare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Prepare_reflection_ = NULL;
const ::google::protobuf::Descriptor* Accept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Accept_reflection_ = NULL;
const ::google::protobuf::Descriptor* PaxosRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PaxosRecord_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_simple_5fpaxos_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_simple_5fpaxos_2eproto() {
  protobuf_AddDesc_simple_5fpaxos_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "simple_paxos.proto");
  GOOGLE_CHECK(file != NULL);
  PrepareRet_descriptor_ = file->message_type(0);
  static const int PrepareRet_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRet, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRet, proposaln_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRet, acceptern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRet, accepterv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRet, isok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRet, consenus_group_),
  };
  PrepareRet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PrepareRet_descriptor_,
      PrepareRet::default_instance_,
      PrepareRet_offsets_,
      -1,
      -1,
      -1,
      sizeof(PrepareRet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRet, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRet, _is_default_instance_));
  AcceptRet_descriptor_ = file->message_type(1);
  static const int AcceptRet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptRet, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptRet, proposaln_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptRet, isok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptRet, consenus_group_),
  };
  AcceptRet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AcceptRet_descriptor_,
      AcceptRet::default_instance_,
      AcceptRet_offsets_,
      -1,
      -1,
      -1,
      sizeof(AcceptRet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptRet, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptRet, _is_default_instance_));
  Prepare_descriptor_ = file->message_type(2);
  static const int Prepare_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prepare, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prepare, proposaln_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prepare, consenus_group_),
  };
  Prepare_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Prepare_descriptor_,
      Prepare::default_instance_,
      Prepare_offsets_,
      -1,
      -1,
      -1,
      sizeof(Prepare),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prepare, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prepare, _is_default_instance_));
  Accept_descriptor_ = file->message_type(3);
  static const int Accept_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Accept, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Accept, acceptern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Accept, accepterv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Accept, consenus_group_),
  };
  Accept_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Accept_descriptor_,
      Accept::default_instance_,
      Accept_offsets_,
      -1,
      -1,
      -1,
      sizeof(Accept),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Accept, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Accept, _is_default_instance_));
  PaxosRecord_descriptor_ = file->message_type(4);
  static const int PaxosRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosRecord, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosRecord, proposaln_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosRecord, acceptn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosRecord, accepterv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosRecord, confirm_),
  };
  PaxosRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PaxosRecord_descriptor_,
      PaxosRecord::default_instance_,
      PaxosRecord_offsets_,
      -1,
      -1,
      -1,
      sizeof(PaxosRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosRecord, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosRecord, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_simple_5fpaxos_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PrepareRet_descriptor_, &PrepareRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AcceptRet_descriptor_, &AcceptRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Prepare_descriptor_, &Prepare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Accept_descriptor_, &Accept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PaxosRecord_descriptor_, &PaxosRecord::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_simple_5fpaxos_2eproto() {
  delete PrepareRet::default_instance_;
  delete PrepareRet_reflection_;
  delete AcceptRet::default_instance_;
  delete AcceptRet_reflection_;
  delete Prepare::default_instance_;
  delete Prepare_reflection_;
  delete Accept::default_instance_;
  delete Accept_reflection_;
  delete PaxosRecord::default_instance_;
  delete PaxosRecord_reflection_;
}

void protobuf_AddDesc_simple_5fpaxos_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_simple_5fpaxos_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::lkvrpc::protobuf_AddDesc_lkv_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022simple_paxos.proto\022\013simplepaxos\032\tlkv.p"
    "roto\"\226\001\n\nPrepareRet\022\022\n\ninstanceid\030\001 \001(\004\022"
    "\021\n\tproposaln\030\002 \001(\004\022\021\n\tacceptern\030\003 \001(\004\022(\n"
    "\taccepterv\030\004 \001(\0132\025.lkvrpc.ConsensusType\022"
    "\014\n\004isok\030\005 \001(\010\022\026\n\016consenus_group\030\006 \001(\t\"X\n"
    "\tAcceptRet\022\022\n\ninstanceid\030\001 \001(\004\022\021\n\tpropos"
    "aln\030\002 \001(\004\022\014\n\004isok\030\003 \001(\010\022\026\n\016consenus_grou"
    "p\030\004 \001(\t\"H\n\007Prepare\022\022\n\ninstanceid\030\001 \001(\004\022\021"
    "\n\tproposaln\030\002 \001(\004\022\026\n\016consenus_group\030\003 \001("
    "\t\"q\n\006Accept\022\022\n\ninstanceid\030\001 \001(\004\022\021\n\taccep"
    "tern\030\002 \001(\004\022(\n\taccepterv\030\003 \001(\0132\025.lkvrpc.C"
    "onsensusType\022\026\n\016consenus_group\030\004 \001(\t\"\200\001\n"
    "\013PaxosRecord\022\022\n\ninstanceid\030\001 \001(\004\022\021\n\tprop"
    "osaln\030\002 \001(\004\022\017\n\007acceptn\030\003 \001(\004\022(\n\taccepter"
    "v\030\004 \001(\0132\025.lkvrpc.ConsensusType\022\017\n\007confir"
    "m\030\005 \001(\0102\216\001\n\013SimplePaxos\022=\n\014HandleAccept\022"
    "\023.simplepaxos.Accept\032\026.simplepaxos.Accep"
    "tRet\"\000\022@\n\rHandlePrepare\022\024.simplepaxos.Pr"
    "epare\032\027.simplepaxos.PrepareRet\"\000b\006proto3", 760);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "simple_paxos.proto", &protobuf_RegisterTypes);
  PrepareRet::default_instance_ = new PrepareRet();
  AcceptRet::default_instance_ = new AcceptRet();
  Prepare::default_instance_ = new Prepare();
  Accept::default_instance_ = new Accept();
  PaxosRecord::default_instance_ = new PaxosRecord();
  PrepareRet::default_instance_->InitAsDefaultInstance();
  AcceptRet::default_instance_->InitAsDefaultInstance();
  Prepare::default_instance_->InitAsDefaultInstance();
  Accept::default_instance_->InitAsDefaultInstance();
  PaxosRecord::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_simple_5fpaxos_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_simple_5fpaxos_2eproto {
  StaticDescriptorInitializer_simple_5fpaxos_2eproto() {
    protobuf_AddDesc_simple_5fpaxos_2eproto();
  }
} static_descriptor_initializer_simple_5fpaxos_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareRet::kInstanceidFieldNumber;
const int PrepareRet::kProposalnFieldNumber;
const int PrepareRet::kAccepternFieldNumber;
const int PrepareRet::kAcceptervFieldNumber;
const int PrepareRet::kIsokFieldNumber;
const int PrepareRet::kConsenusGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareRet::PrepareRet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simplepaxos.PrepareRet)
}

void PrepareRet::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  accepterv_ = const_cast< ::lkvrpc::ConsensusType*>(&::lkvrpc::ConsensusType::default_instance());
}

PrepareRet::PrepareRet(const PrepareRet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:simplepaxos.PrepareRet)
}

void PrepareRet::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  instanceid_ = GOOGLE_ULONGLONG(0);
  proposaln_ = GOOGLE_ULONGLONG(0);
  acceptern_ = GOOGLE_ULONGLONG(0);
  accepterv_ = NULL;
  isok_ = false;
  consenus_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PrepareRet::~PrepareRet() {
  // @@protoc_insertion_point(destructor:simplepaxos.PrepareRet)
  SharedDtor();
}

void PrepareRet::SharedDtor() {
  consenus_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete accepterv_;
  }
}

void PrepareRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepareRet_descriptor_;
}

const PrepareRet& PrepareRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simple_5fpaxos_2eproto();
  return *default_instance_;
}

PrepareRet* PrepareRet::default_instance_ = NULL;

PrepareRet* PrepareRet::New(::google::protobuf::Arena* arena) const {
  PrepareRet* n = new PrepareRet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrepareRet::Clear() {
// @@protoc_insertion_point(message_clear_start:simplepaxos.PrepareRet)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PrepareRet, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PrepareRet*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(instanceid_, acceptern_);
  if (GetArenaNoVirtual() == NULL && accepterv_ != NULL) delete accepterv_;
  accepterv_ = NULL;
  isok_ = false;
  consenus_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool PrepareRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simplepaxos.PrepareRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 instanceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_proposaln;
        break;
      }

      // optional uint64 proposaln = 2;
      case 2: {
        if (tag == 16) {
         parse_proposaln:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proposaln_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_acceptern;
        break;
      }

      // optional uint64 acceptern = 3;
      case 3: {
        if (tag == 24) {
         parse_acceptern:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &acceptern_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_accepterv;
        break;
      }

      // optional .lkvrpc.ConsensusType accepterv = 4;
      case 4: {
        if (tag == 34) {
         parse_accepterv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accepterv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isok;
        break;
      }

      // optional bool isok = 5;
      case 5: {
        if (tag == 40) {
         parse_isok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isok_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_consenus_group;
        break;
      }

      // optional string consenus_group = 6;
      case 6: {
        if (tag == 50) {
         parse_consenus_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_consenus_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->consenus_group().data(), this->consenus_group().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "simplepaxos.PrepareRet.consenus_group"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simplepaxos.PrepareRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simplepaxos.PrepareRet)
  return false;
#undef DO_
}

void PrepareRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simplepaxos.PrepareRet)
  // optional uint64 instanceid = 1;
  if (this->instanceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->instanceid(), output);
  }

  // optional uint64 proposaln = 2;
  if (this->proposaln() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->proposaln(), output);
  }

  // optional uint64 acceptern = 3;
  if (this->acceptern() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->acceptern(), output);
  }

  // optional .lkvrpc.ConsensusType accepterv = 4;
  if (this->has_accepterv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->accepterv_, output);
  }

  // optional bool isok = 5;
  if (this->isok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isok(), output);
  }

  // optional string consenus_group = 6;
  if (this->consenus_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consenus_group().data(), this->consenus_group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "simplepaxos.PrepareRet.consenus_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->consenus_group(), output);
  }

  // @@protoc_insertion_point(serialize_end:simplepaxos.PrepareRet)
}

::google::protobuf::uint8* PrepareRet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:simplepaxos.PrepareRet)
  // optional uint64 instanceid = 1;
  if (this->instanceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->instanceid(), target);
  }

  // optional uint64 proposaln = 2;
  if (this->proposaln() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->proposaln(), target);
  }

  // optional uint64 acceptern = 3;
  if (this->acceptern() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->acceptern(), target);
  }

  // optional .lkvrpc.ConsensusType accepterv = 4;
  if (this->has_accepterv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->accepterv_, false, target);
  }

  // optional bool isok = 5;
  if (this->isok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isok(), target);
  }

  // optional string consenus_group = 6;
  if (this->consenus_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consenus_group().data(), this->consenus_group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "simplepaxos.PrepareRet.consenus_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->consenus_group(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:simplepaxos.PrepareRet)
  return target;
}

int PrepareRet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:simplepaxos.PrepareRet)
  int total_size = 0;

  // optional uint64 instanceid = 1;
  if (this->instanceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->instanceid());
  }

  // optional uint64 proposaln = 2;
  if (this->proposaln() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->proposaln());
  }

  // optional uint64 acceptern = 3;
  if (this->acceptern() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->acceptern());
  }

  // optional .lkvrpc.ConsensusType accepterv = 4;
  if (this->has_accepterv()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->accepterv_);
  }

  // optional bool isok = 5;
  if (this->isok() != 0) {
    total_size += 1 + 1;
  }

  // optional string consenus_group = 6;
  if (this->consenus_group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->consenus_group());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareRet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplepaxos.PrepareRet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PrepareRet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PrepareRet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplepaxos.PrepareRet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplepaxos.PrepareRet)
    MergeFrom(*source);
  }
}

void PrepareRet::MergeFrom(const PrepareRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplepaxos.PrepareRet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.instanceid() != 0) {
    set_instanceid(from.instanceid());
  }
  if (from.proposaln() != 0) {
    set_proposaln(from.proposaln());
  }
  if (from.acceptern() != 0) {
    set_acceptern(from.acceptern());
  }
  if (from.has_accepterv()) {
    mutable_accepterv()->::lkvrpc::ConsensusType::MergeFrom(from.accepterv());
  }
  if (from.isok() != 0) {
    set_isok(from.isok());
  }
  if (from.consenus_group().size() > 0) {

    consenus_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consenus_group_);
  }
}

void PrepareRet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplepaxos.PrepareRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareRet::CopyFrom(const PrepareRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplepaxos.PrepareRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareRet::IsInitialized() const {

  return true;
}

void PrepareRet::Swap(PrepareRet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareRet::InternalSwap(PrepareRet* other) {
  std::swap(instanceid_, other->instanceid_);
  std::swap(proposaln_, other->proposaln_);
  std::swap(acceptern_, other->acceptern_);
  std::swap(accepterv_, other->accepterv_);
  std::swap(isok_, other->isok_);
  consenus_group_.Swap(&other->consenus_group_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrepareRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepareRet_descriptor_;
  metadata.reflection = PrepareRet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrepareRet

// optional uint64 instanceid = 1;
void PrepareRet::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 PrepareRet::instanceid() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PrepareRet.instanceid)
  return instanceid_;
}
 void PrepareRet::set_instanceid(::google::protobuf::uint64 value) {
  
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.PrepareRet.instanceid)
}

// optional uint64 proposaln = 2;
void PrepareRet::clear_proposaln() {
  proposaln_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 PrepareRet::proposaln() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PrepareRet.proposaln)
  return proposaln_;
}
 void PrepareRet::set_proposaln(::google::protobuf::uint64 value) {
  
  proposaln_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.PrepareRet.proposaln)
}

// optional uint64 acceptern = 3;
void PrepareRet::clear_acceptern() {
  acceptern_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 PrepareRet::acceptern() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PrepareRet.acceptern)
  return acceptern_;
}
 void PrepareRet::set_acceptern(::google::protobuf::uint64 value) {
  
  acceptern_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.PrepareRet.acceptern)
}

// optional .lkvrpc.ConsensusType accepterv = 4;
bool PrepareRet::has_accepterv() const {
  return !_is_default_instance_ && accepterv_ != NULL;
}
void PrepareRet::clear_accepterv() {
  if (GetArenaNoVirtual() == NULL && accepterv_ != NULL) delete accepterv_;
  accepterv_ = NULL;
}
const ::lkvrpc::ConsensusType& PrepareRet::accepterv() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PrepareRet.accepterv)
  return accepterv_ != NULL ? *accepterv_ : *default_instance_->accepterv_;
}
::lkvrpc::ConsensusType* PrepareRet::mutable_accepterv() {
  
  if (accepterv_ == NULL) {
    accepterv_ = new ::lkvrpc::ConsensusType;
  }
  // @@protoc_insertion_point(field_mutable:simplepaxos.PrepareRet.accepterv)
  return accepterv_;
}
::lkvrpc::ConsensusType* PrepareRet::release_accepterv() {
  // @@protoc_insertion_point(field_release:simplepaxos.PrepareRet.accepterv)
  
  ::lkvrpc::ConsensusType* temp = accepterv_;
  accepterv_ = NULL;
  return temp;
}
void PrepareRet::set_allocated_accepterv(::lkvrpc::ConsensusType* accepterv) {
  delete accepterv_;
  accepterv_ = accepterv;
  if (accepterv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:simplepaxos.PrepareRet.accepterv)
}

// optional bool isok = 5;
void PrepareRet::clear_isok() {
  isok_ = false;
}
 bool PrepareRet::isok() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PrepareRet.isok)
  return isok_;
}
 void PrepareRet::set_isok(bool value) {
  
  isok_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.PrepareRet.isok)
}

// optional string consenus_group = 6;
void PrepareRet::clear_consenus_group() {
  consenus_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PrepareRet::consenus_group() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PrepareRet.consenus_group)
  return consenus_group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PrepareRet::set_consenus_group(const ::std::string& value) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplepaxos.PrepareRet.consenus_group)
}
 void PrepareRet::set_consenus_group(const char* value) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplepaxos.PrepareRet.consenus_group)
}
 void PrepareRet::set_consenus_group(const char* value, size_t size) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplepaxos.PrepareRet.consenus_group)
}
 ::std::string* PrepareRet::mutable_consenus_group() {
  
  // @@protoc_insertion_point(field_mutable:simplepaxos.PrepareRet.consenus_group)
  return consenus_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PrepareRet::release_consenus_group() {
  // @@protoc_insertion_point(field_release:simplepaxos.PrepareRet.consenus_group)
  
  return consenus_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PrepareRet::set_allocated_consenus_group(::std::string* consenus_group) {
  if (consenus_group != NULL) {
    
  } else {
    
  }
  consenus_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consenus_group);
  // @@protoc_insertion_point(field_set_allocated:simplepaxos.PrepareRet.consenus_group)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcceptRet::kInstanceidFieldNumber;
const int AcceptRet::kProposalnFieldNumber;
const int AcceptRet::kIsokFieldNumber;
const int AcceptRet::kConsenusGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcceptRet::AcceptRet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simplepaxos.AcceptRet)
}

void AcceptRet::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AcceptRet::AcceptRet(const AcceptRet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:simplepaxos.AcceptRet)
}

void AcceptRet::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  instanceid_ = GOOGLE_ULONGLONG(0);
  proposaln_ = GOOGLE_ULONGLONG(0);
  isok_ = false;
  consenus_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AcceptRet::~AcceptRet() {
  // @@protoc_insertion_point(destructor:simplepaxos.AcceptRet)
  SharedDtor();
}

void AcceptRet::SharedDtor() {
  consenus_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AcceptRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptRet_descriptor_;
}

const AcceptRet& AcceptRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simple_5fpaxos_2eproto();
  return *default_instance_;
}

AcceptRet* AcceptRet::default_instance_ = NULL;

AcceptRet* AcceptRet::New(::google::protobuf::Arena* arena) const {
  AcceptRet* n = new AcceptRet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcceptRet::Clear() {
// @@protoc_insertion_point(message_clear_start:simplepaxos.AcceptRet)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AcceptRet, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AcceptRet*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(instanceid_, proposaln_);
  isok_ = false;
  consenus_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool AcceptRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simplepaxos.AcceptRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 instanceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_proposaln;
        break;
      }

      // optional uint64 proposaln = 2;
      case 2: {
        if (tag == 16) {
         parse_proposaln:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proposaln_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isok;
        break;
      }

      // optional bool isok = 3;
      case 3: {
        if (tag == 24) {
         parse_isok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isok_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_consenus_group;
        break;
      }

      // optional string consenus_group = 4;
      case 4: {
        if (tag == 34) {
         parse_consenus_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_consenus_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->consenus_group().data(), this->consenus_group().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "simplepaxos.AcceptRet.consenus_group"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simplepaxos.AcceptRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simplepaxos.AcceptRet)
  return false;
#undef DO_
}

void AcceptRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simplepaxos.AcceptRet)
  // optional uint64 instanceid = 1;
  if (this->instanceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->instanceid(), output);
  }

  // optional uint64 proposaln = 2;
  if (this->proposaln() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->proposaln(), output);
  }

  // optional bool isok = 3;
  if (this->isok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isok(), output);
  }

  // optional string consenus_group = 4;
  if (this->consenus_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consenus_group().data(), this->consenus_group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "simplepaxos.AcceptRet.consenus_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->consenus_group(), output);
  }

  // @@protoc_insertion_point(serialize_end:simplepaxos.AcceptRet)
}

::google::protobuf::uint8* AcceptRet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:simplepaxos.AcceptRet)
  // optional uint64 instanceid = 1;
  if (this->instanceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->instanceid(), target);
  }

  // optional uint64 proposaln = 2;
  if (this->proposaln() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->proposaln(), target);
  }

  // optional bool isok = 3;
  if (this->isok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isok(), target);
  }

  // optional string consenus_group = 4;
  if (this->consenus_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consenus_group().data(), this->consenus_group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "simplepaxos.AcceptRet.consenus_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->consenus_group(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:simplepaxos.AcceptRet)
  return target;
}

int AcceptRet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:simplepaxos.AcceptRet)
  int total_size = 0;

  // optional uint64 instanceid = 1;
  if (this->instanceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->instanceid());
  }

  // optional uint64 proposaln = 2;
  if (this->proposaln() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->proposaln());
  }

  // optional bool isok = 3;
  if (this->isok() != 0) {
    total_size += 1 + 1;
  }

  // optional string consenus_group = 4;
  if (this->consenus_group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->consenus_group());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptRet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplepaxos.AcceptRet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AcceptRet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AcceptRet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplepaxos.AcceptRet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplepaxos.AcceptRet)
    MergeFrom(*source);
  }
}

void AcceptRet::MergeFrom(const AcceptRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplepaxos.AcceptRet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.instanceid() != 0) {
    set_instanceid(from.instanceid());
  }
  if (from.proposaln() != 0) {
    set_proposaln(from.proposaln());
  }
  if (from.isok() != 0) {
    set_isok(from.isok());
  }
  if (from.consenus_group().size() > 0) {

    consenus_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consenus_group_);
  }
}

void AcceptRet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplepaxos.AcceptRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptRet::CopyFrom(const AcceptRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplepaxos.AcceptRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptRet::IsInitialized() const {

  return true;
}

void AcceptRet::Swap(AcceptRet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcceptRet::InternalSwap(AcceptRet* other) {
  std::swap(instanceid_, other->instanceid_);
  std::swap(proposaln_, other->proposaln_);
  std::swap(isok_, other->isok_);
  consenus_group_.Swap(&other->consenus_group_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcceptRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptRet_descriptor_;
  metadata.reflection = AcceptRet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AcceptRet

// optional uint64 instanceid = 1;
void AcceptRet::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AcceptRet::instanceid() const {
  // @@protoc_insertion_point(field_get:simplepaxos.AcceptRet.instanceid)
  return instanceid_;
}
 void AcceptRet::set_instanceid(::google::protobuf::uint64 value) {
  
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.AcceptRet.instanceid)
}

// optional uint64 proposaln = 2;
void AcceptRet::clear_proposaln() {
  proposaln_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AcceptRet::proposaln() const {
  // @@protoc_insertion_point(field_get:simplepaxos.AcceptRet.proposaln)
  return proposaln_;
}
 void AcceptRet::set_proposaln(::google::protobuf::uint64 value) {
  
  proposaln_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.AcceptRet.proposaln)
}

// optional bool isok = 3;
void AcceptRet::clear_isok() {
  isok_ = false;
}
 bool AcceptRet::isok() const {
  // @@protoc_insertion_point(field_get:simplepaxos.AcceptRet.isok)
  return isok_;
}
 void AcceptRet::set_isok(bool value) {
  
  isok_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.AcceptRet.isok)
}

// optional string consenus_group = 4;
void AcceptRet::clear_consenus_group() {
  consenus_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AcceptRet::consenus_group() const {
  // @@protoc_insertion_point(field_get:simplepaxos.AcceptRet.consenus_group)
  return consenus_group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AcceptRet::set_consenus_group(const ::std::string& value) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplepaxos.AcceptRet.consenus_group)
}
 void AcceptRet::set_consenus_group(const char* value) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplepaxos.AcceptRet.consenus_group)
}
 void AcceptRet::set_consenus_group(const char* value, size_t size) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplepaxos.AcceptRet.consenus_group)
}
 ::std::string* AcceptRet::mutable_consenus_group() {
  
  // @@protoc_insertion_point(field_mutable:simplepaxos.AcceptRet.consenus_group)
  return consenus_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AcceptRet::release_consenus_group() {
  // @@protoc_insertion_point(field_release:simplepaxos.AcceptRet.consenus_group)
  
  return consenus_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AcceptRet::set_allocated_consenus_group(::std::string* consenus_group) {
  if (consenus_group != NULL) {
    
  } else {
    
  }
  consenus_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consenus_group);
  // @@protoc_insertion_point(field_set_allocated:simplepaxos.AcceptRet.consenus_group)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Prepare::kInstanceidFieldNumber;
const int Prepare::kProposalnFieldNumber;
const int Prepare::kConsenusGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Prepare::Prepare()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simplepaxos.Prepare)
}

void Prepare::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Prepare::Prepare(const Prepare& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:simplepaxos.Prepare)
}

void Prepare::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  instanceid_ = GOOGLE_ULONGLONG(0);
  proposaln_ = GOOGLE_ULONGLONG(0);
  consenus_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Prepare::~Prepare() {
  // @@protoc_insertion_point(destructor:simplepaxos.Prepare)
  SharedDtor();
}

void Prepare::SharedDtor() {
  consenus_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Prepare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Prepare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Prepare_descriptor_;
}

const Prepare& Prepare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simple_5fpaxos_2eproto();
  return *default_instance_;
}

Prepare* Prepare::default_instance_ = NULL;

Prepare* Prepare::New(::google::protobuf::Arena* arena) const {
  Prepare* n = new Prepare;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Prepare::Clear() {
// @@protoc_insertion_point(message_clear_start:simplepaxos.Prepare)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Prepare, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Prepare*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(instanceid_, proposaln_);
  consenus_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Prepare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simplepaxos.Prepare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 instanceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_proposaln;
        break;
      }

      // optional uint64 proposaln = 2;
      case 2: {
        if (tag == 16) {
         parse_proposaln:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proposaln_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_consenus_group;
        break;
      }

      // optional string consenus_group = 3;
      case 3: {
        if (tag == 26) {
         parse_consenus_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_consenus_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->consenus_group().data(), this->consenus_group().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "simplepaxos.Prepare.consenus_group"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simplepaxos.Prepare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simplepaxos.Prepare)
  return false;
#undef DO_
}

void Prepare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simplepaxos.Prepare)
  // optional uint64 instanceid = 1;
  if (this->instanceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->instanceid(), output);
  }

  // optional uint64 proposaln = 2;
  if (this->proposaln() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->proposaln(), output);
  }

  // optional string consenus_group = 3;
  if (this->consenus_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consenus_group().data(), this->consenus_group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "simplepaxos.Prepare.consenus_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->consenus_group(), output);
  }

  // @@protoc_insertion_point(serialize_end:simplepaxos.Prepare)
}

::google::protobuf::uint8* Prepare::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:simplepaxos.Prepare)
  // optional uint64 instanceid = 1;
  if (this->instanceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->instanceid(), target);
  }

  // optional uint64 proposaln = 2;
  if (this->proposaln() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->proposaln(), target);
  }

  // optional string consenus_group = 3;
  if (this->consenus_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consenus_group().data(), this->consenus_group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "simplepaxos.Prepare.consenus_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->consenus_group(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:simplepaxos.Prepare)
  return target;
}

int Prepare::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:simplepaxos.Prepare)
  int total_size = 0;

  // optional uint64 instanceid = 1;
  if (this->instanceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->instanceid());
  }

  // optional uint64 proposaln = 2;
  if (this->proposaln() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->proposaln());
  }

  // optional string consenus_group = 3;
  if (this->consenus_group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->consenus_group());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Prepare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplepaxos.Prepare)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Prepare* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Prepare>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplepaxos.Prepare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplepaxos.Prepare)
    MergeFrom(*source);
  }
}

void Prepare::MergeFrom(const Prepare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplepaxos.Prepare)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.instanceid() != 0) {
    set_instanceid(from.instanceid());
  }
  if (from.proposaln() != 0) {
    set_proposaln(from.proposaln());
  }
  if (from.consenus_group().size() > 0) {

    consenus_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consenus_group_);
  }
}

void Prepare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplepaxos.Prepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prepare::CopyFrom(const Prepare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplepaxos.Prepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prepare::IsInitialized() const {

  return true;
}

void Prepare::Swap(Prepare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Prepare::InternalSwap(Prepare* other) {
  std::swap(instanceid_, other->instanceid_);
  std::swap(proposaln_, other->proposaln_);
  consenus_group_.Swap(&other->consenus_group_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Prepare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Prepare_descriptor_;
  metadata.reflection = Prepare_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Prepare

// optional uint64 instanceid = 1;
void Prepare::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Prepare::instanceid() const {
  // @@protoc_insertion_point(field_get:simplepaxos.Prepare.instanceid)
  return instanceid_;
}
 void Prepare::set_instanceid(::google::protobuf::uint64 value) {
  
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.Prepare.instanceid)
}

// optional uint64 proposaln = 2;
void Prepare::clear_proposaln() {
  proposaln_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Prepare::proposaln() const {
  // @@protoc_insertion_point(field_get:simplepaxos.Prepare.proposaln)
  return proposaln_;
}
 void Prepare::set_proposaln(::google::protobuf::uint64 value) {
  
  proposaln_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.Prepare.proposaln)
}

// optional string consenus_group = 3;
void Prepare::clear_consenus_group() {
  consenus_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Prepare::consenus_group() const {
  // @@protoc_insertion_point(field_get:simplepaxos.Prepare.consenus_group)
  return consenus_group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Prepare::set_consenus_group(const ::std::string& value) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplepaxos.Prepare.consenus_group)
}
 void Prepare::set_consenus_group(const char* value) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplepaxos.Prepare.consenus_group)
}
 void Prepare::set_consenus_group(const char* value, size_t size) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplepaxos.Prepare.consenus_group)
}
 ::std::string* Prepare::mutable_consenus_group() {
  
  // @@protoc_insertion_point(field_mutable:simplepaxos.Prepare.consenus_group)
  return consenus_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Prepare::release_consenus_group() {
  // @@protoc_insertion_point(field_release:simplepaxos.Prepare.consenus_group)
  
  return consenus_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Prepare::set_allocated_consenus_group(::std::string* consenus_group) {
  if (consenus_group != NULL) {
    
  } else {
    
  }
  consenus_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consenus_group);
  // @@protoc_insertion_point(field_set_allocated:simplepaxos.Prepare.consenus_group)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Accept::kInstanceidFieldNumber;
const int Accept::kAccepternFieldNumber;
const int Accept::kAcceptervFieldNumber;
const int Accept::kConsenusGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Accept::Accept()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simplepaxos.Accept)
}

void Accept::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  accepterv_ = const_cast< ::lkvrpc::ConsensusType*>(&::lkvrpc::ConsensusType::default_instance());
}

Accept::Accept(const Accept& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:simplepaxos.Accept)
}

void Accept::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  instanceid_ = GOOGLE_ULONGLONG(0);
  acceptern_ = GOOGLE_ULONGLONG(0);
  accepterv_ = NULL;
  consenus_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Accept::~Accept() {
  // @@protoc_insertion_point(destructor:simplepaxos.Accept)
  SharedDtor();
}

void Accept::SharedDtor() {
  consenus_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete accepterv_;
  }
}

void Accept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Accept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Accept_descriptor_;
}

const Accept& Accept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simple_5fpaxos_2eproto();
  return *default_instance_;
}

Accept* Accept::default_instance_ = NULL;

Accept* Accept::New(::google::protobuf::Arena* arena) const {
  Accept* n = new Accept;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Accept::Clear() {
// @@protoc_insertion_point(message_clear_start:simplepaxos.Accept)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Accept, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Accept*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(instanceid_, acceptern_);
  if (GetArenaNoVirtual() == NULL && accepterv_ != NULL) delete accepterv_;
  accepterv_ = NULL;
  consenus_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Accept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simplepaxos.Accept)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 instanceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_acceptern;
        break;
      }

      // optional uint64 acceptern = 2;
      case 2: {
        if (tag == 16) {
         parse_acceptern:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &acceptern_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_accepterv;
        break;
      }

      // optional .lkvrpc.ConsensusType accepterv = 3;
      case 3: {
        if (tag == 26) {
         parse_accepterv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accepterv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_consenus_group;
        break;
      }

      // optional string consenus_group = 4;
      case 4: {
        if (tag == 34) {
         parse_consenus_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_consenus_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->consenus_group().data(), this->consenus_group().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "simplepaxos.Accept.consenus_group"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simplepaxos.Accept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simplepaxos.Accept)
  return false;
#undef DO_
}

void Accept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simplepaxos.Accept)
  // optional uint64 instanceid = 1;
  if (this->instanceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->instanceid(), output);
  }

  // optional uint64 acceptern = 2;
  if (this->acceptern() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->acceptern(), output);
  }

  // optional .lkvrpc.ConsensusType accepterv = 3;
  if (this->has_accepterv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->accepterv_, output);
  }

  // optional string consenus_group = 4;
  if (this->consenus_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consenus_group().data(), this->consenus_group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "simplepaxos.Accept.consenus_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->consenus_group(), output);
  }

  // @@protoc_insertion_point(serialize_end:simplepaxos.Accept)
}

::google::protobuf::uint8* Accept::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:simplepaxos.Accept)
  // optional uint64 instanceid = 1;
  if (this->instanceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->instanceid(), target);
  }

  // optional uint64 acceptern = 2;
  if (this->acceptern() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->acceptern(), target);
  }

  // optional .lkvrpc.ConsensusType accepterv = 3;
  if (this->has_accepterv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->accepterv_, false, target);
  }

  // optional string consenus_group = 4;
  if (this->consenus_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consenus_group().data(), this->consenus_group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "simplepaxos.Accept.consenus_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->consenus_group(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:simplepaxos.Accept)
  return target;
}

int Accept::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:simplepaxos.Accept)
  int total_size = 0;

  // optional uint64 instanceid = 1;
  if (this->instanceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->instanceid());
  }

  // optional uint64 acceptern = 2;
  if (this->acceptern() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->acceptern());
  }

  // optional .lkvrpc.ConsensusType accepterv = 3;
  if (this->has_accepterv()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->accepterv_);
  }

  // optional string consenus_group = 4;
  if (this->consenus_group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->consenus_group());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Accept::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplepaxos.Accept)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Accept* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Accept>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplepaxos.Accept)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplepaxos.Accept)
    MergeFrom(*source);
  }
}

void Accept::MergeFrom(const Accept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplepaxos.Accept)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.instanceid() != 0) {
    set_instanceid(from.instanceid());
  }
  if (from.acceptern() != 0) {
    set_acceptern(from.acceptern());
  }
  if (from.has_accepterv()) {
    mutable_accepterv()->::lkvrpc::ConsensusType::MergeFrom(from.accepterv());
  }
  if (from.consenus_group().size() > 0) {

    consenus_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consenus_group_);
  }
}

void Accept::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplepaxos.Accept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Accept::CopyFrom(const Accept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplepaxos.Accept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accept::IsInitialized() const {

  return true;
}

void Accept::Swap(Accept* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Accept::InternalSwap(Accept* other) {
  std::swap(instanceid_, other->instanceid_);
  std::swap(acceptern_, other->acceptern_);
  std::swap(accepterv_, other->accepterv_);
  consenus_group_.Swap(&other->consenus_group_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Accept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Accept_descriptor_;
  metadata.reflection = Accept_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Accept

// optional uint64 instanceid = 1;
void Accept::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Accept::instanceid() const {
  // @@protoc_insertion_point(field_get:simplepaxos.Accept.instanceid)
  return instanceid_;
}
 void Accept::set_instanceid(::google::protobuf::uint64 value) {
  
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.Accept.instanceid)
}

// optional uint64 acceptern = 2;
void Accept::clear_acceptern() {
  acceptern_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Accept::acceptern() const {
  // @@protoc_insertion_point(field_get:simplepaxos.Accept.acceptern)
  return acceptern_;
}
 void Accept::set_acceptern(::google::protobuf::uint64 value) {
  
  acceptern_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.Accept.acceptern)
}

// optional .lkvrpc.ConsensusType accepterv = 3;
bool Accept::has_accepterv() const {
  return !_is_default_instance_ && accepterv_ != NULL;
}
void Accept::clear_accepterv() {
  if (GetArenaNoVirtual() == NULL && accepterv_ != NULL) delete accepterv_;
  accepterv_ = NULL;
}
const ::lkvrpc::ConsensusType& Accept::accepterv() const {
  // @@protoc_insertion_point(field_get:simplepaxos.Accept.accepterv)
  return accepterv_ != NULL ? *accepterv_ : *default_instance_->accepterv_;
}
::lkvrpc::ConsensusType* Accept::mutable_accepterv() {
  
  if (accepterv_ == NULL) {
    accepterv_ = new ::lkvrpc::ConsensusType;
  }
  // @@protoc_insertion_point(field_mutable:simplepaxos.Accept.accepterv)
  return accepterv_;
}
::lkvrpc::ConsensusType* Accept::release_accepterv() {
  // @@protoc_insertion_point(field_release:simplepaxos.Accept.accepterv)
  
  ::lkvrpc::ConsensusType* temp = accepterv_;
  accepterv_ = NULL;
  return temp;
}
void Accept::set_allocated_accepterv(::lkvrpc::ConsensusType* accepterv) {
  delete accepterv_;
  accepterv_ = accepterv;
  if (accepterv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:simplepaxos.Accept.accepterv)
}

// optional string consenus_group = 4;
void Accept::clear_consenus_group() {
  consenus_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Accept::consenus_group() const {
  // @@protoc_insertion_point(field_get:simplepaxos.Accept.consenus_group)
  return consenus_group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Accept::set_consenus_group(const ::std::string& value) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplepaxos.Accept.consenus_group)
}
 void Accept::set_consenus_group(const char* value) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplepaxos.Accept.consenus_group)
}
 void Accept::set_consenus_group(const char* value, size_t size) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplepaxos.Accept.consenus_group)
}
 ::std::string* Accept::mutable_consenus_group() {
  
  // @@protoc_insertion_point(field_mutable:simplepaxos.Accept.consenus_group)
  return consenus_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Accept::release_consenus_group() {
  // @@protoc_insertion_point(field_release:simplepaxos.Accept.consenus_group)
  
  return consenus_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Accept::set_allocated_consenus_group(::std::string* consenus_group) {
  if (consenus_group != NULL) {
    
  } else {
    
  }
  consenus_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consenus_group);
  // @@protoc_insertion_point(field_set_allocated:simplepaxos.Accept.consenus_group)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PaxosRecord::kInstanceidFieldNumber;
const int PaxosRecord::kProposalnFieldNumber;
const int PaxosRecord::kAcceptnFieldNumber;
const int PaxosRecord::kAcceptervFieldNumber;
const int PaxosRecord::kConfirmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PaxosRecord::PaxosRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simplepaxos.PaxosRecord)
}

void PaxosRecord::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  accepterv_ = const_cast< ::lkvrpc::ConsensusType*>(&::lkvrpc::ConsensusType::default_instance());
}

PaxosRecord::PaxosRecord(const PaxosRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:simplepaxos.PaxosRecord)
}

void PaxosRecord::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  instanceid_ = GOOGLE_ULONGLONG(0);
  proposaln_ = GOOGLE_ULONGLONG(0);
  acceptn_ = GOOGLE_ULONGLONG(0);
  accepterv_ = NULL;
  confirm_ = false;
}

PaxosRecord::~PaxosRecord() {
  // @@protoc_insertion_point(destructor:simplepaxos.PaxosRecord)
  SharedDtor();
}

void PaxosRecord::SharedDtor() {
  if (this != default_instance_) {
    delete accepterv_;
  }
}

void PaxosRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PaxosRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PaxosRecord_descriptor_;
}

const PaxosRecord& PaxosRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simple_5fpaxos_2eproto();
  return *default_instance_;
}

PaxosRecord* PaxosRecord::default_instance_ = NULL;

PaxosRecord* PaxosRecord::New(::google::protobuf::Arena* arena) const {
  PaxosRecord* n = new PaxosRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PaxosRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:simplepaxos.PaxosRecord)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PaxosRecord, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PaxosRecord*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(instanceid_, acceptn_);
  if (GetArenaNoVirtual() == NULL && accepterv_ != NULL) delete accepterv_;
  accepterv_ = NULL;
  confirm_ = false;

#undef ZR_HELPER_
#undef ZR_

}

bool PaxosRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simplepaxos.PaxosRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 instanceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_proposaln;
        break;
      }

      // optional uint64 proposaln = 2;
      case 2: {
        if (tag == 16) {
         parse_proposaln:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proposaln_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_acceptn;
        break;
      }

      // optional uint64 acceptn = 3;
      case 3: {
        if (tag == 24) {
         parse_acceptn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &acceptn_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_accepterv;
        break;
      }

      // optional .lkvrpc.ConsensusType accepterv = 4;
      case 4: {
        if (tag == 34) {
         parse_accepterv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accepterv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_confirm;
        break;
      }

      // optional bool confirm = 5;
      case 5: {
        if (tag == 40) {
         parse_confirm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &confirm_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simplepaxos.PaxosRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simplepaxos.PaxosRecord)
  return false;
#undef DO_
}

void PaxosRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simplepaxos.PaxosRecord)
  // optional uint64 instanceid = 1;
  if (this->instanceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->instanceid(), output);
  }

  // optional uint64 proposaln = 2;
  if (this->proposaln() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->proposaln(), output);
  }

  // optional uint64 acceptn = 3;
  if (this->acceptn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->acceptn(), output);
  }

  // optional .lkvrpc.ConsensusType accepterv = 4;
  if (this->has_accepterv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->accepterv_, output);
  }

  // optional bool confirm = 5;
  if (this->confirm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->confirm(), output);
  }

  // @@protoc_insertion_point(serialize_end:simplepaxos.PaxosRecord)
}

::google::protobuf::uint8* PaxosRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:simplepaxos.PaxosRecord)
  // optional uint64 instanceid = 1;
  if (this->instanceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->instanceid(), target);
  }

  // optional uint64 proposaln = 2;
  if (this->proposaln() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->proposaln(), target);
  }

  // optional uint64 acceptn = 3;
  if (this->acceptn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->acceptn(), target);
  }

  // optional .lkvrpc.ConsensusType accepterv = 4;
  if (this->has_accepterv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->accepterv_, false, target);
  }

  // optional bool confirm = 5;
  if (this->confirm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->confirm(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:simplepaxos.PaxosRecord)
  return target;
}

int PaxosRecord::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:simplepaxos.PaxosRecord)
  int total_size = 0;

  // optional uint64 instanceid = 1;
  if (this->instanceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->instanceid());
  }

  // optional uint64 proposaln = 2;
  if (this->proposaln() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->proposaln());
  }

  // optional uint64 acceptn = 3;
  if (this->acceptn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->acceptn());
  }

  // optional .lkvrpc.ConsensusType accepterv = 4;
  if (this->has_accepterv()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->accepterv_);
  }

  // optional bool confirm = 5;
  if (this->confirm() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PaxosRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplepaxos.PaxosRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PaxosRecord* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PaxosRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplepaxos.PaxosRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplepaxos.PaxosRecord)
    MergeFrom(*source);
  }
}

void PaxosRecord::MergeFrom(const PaxosRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplepaxos.PaxosRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.instanceid() != 0) {
    set_instanceid(from.instanceid());
  }
  if (from.proposaln() != 0) {
    set_proposaln(from.proposaln());
  }
  if (from.acceptn() != 0) {
    set_acceptn(from.acceptn());
  }
  if (from.has_accepterv()) {
    mutable_accepterv()->::lkvrpc::ConsensusType::MergeFrom(from.accepterv());
  }
  if (from.confirm() != 0) {
    set_confirm(from.confirm());
  }
}

void PaxosRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplepaxos.PaxosRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaxosRecord::CopyFrom(const PaxosRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplepaxos.PaxosRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaxosRecord::IsInitialized() const {

  return true;
}

void PaxosRecord::Swap(PaxosRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PaxosRecord::InternalSwap(PaxosRecord* other) {
  std::swap(instanceid_, other->instanceid_);
  std::swap(proposaln_, other->proposaln_);
  std::swap(acceptn_, other->acceptn_);
  std::swap(accepterv_, other->accepterv_);
  std::swap(confirm_, other->confirm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PaxosRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PaxosRecord_descriptor_;
  metadata.reflection = PaxosRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PaxosRecord

// optional uint64 instanceid = 1;
void PaxosRecord::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 PaxosRecord::instanceid() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PaxosRecord.instanceid)
  return instanceid_;
}
 void PaxosRecord::set_instanceid(::google::protobuf::uint64 value) {
  
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.PaxosRecord.instanceid)
}

// optional uint64 proposaln = 2;
void PaxosRecord::clear_proposaln() {
  proposaln_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 PaxosRecord::proposaln() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PaxosRecord.proposaln)
  return proposaln_;
}
 void PaxosRecord::set_proposaln(::google::protobuf::uint64 value) {
  
  proposaln_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.PaxosRecord.proposaln)
}

// optional uint64 acceptn = 3;
void PaxosRecord::clear_acceptn() {
  acceptn_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 PaxosRecord::acceptn() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PaxosRecord.acceptn)
  return acceptn_;
}
 void PaxosRecord::set_acceptn(::google::protobuf::uint64 value) {
  
  acceptn_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.PaxosRecord.acceptn)
}

// optional .lkvrpc.ConsensusType accepterv = 4;
bool PaxosRecord::has_accepterv() const {
  return !_is_default_instance_ && accepterv_ != NULL;
}
void PaxosRecord::clear_accepterv() {
  if (GetArenaNoVirtual() == NULL && accepterv_ != NULL) delete accepterv_;
  accepterv_ = NULL;
}
const ::lkvrpc::ConsensusType& PaxosRecord::accepterv() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PaxosRecord.accepterv)
  return accepterv_ != NULL ? *accepterv_ : *default_instance_->accepterv_;
}
::lkvrpc::ConsensusType* PaxosRecord::mutable_accepterv() {
  
  if (accepterv_ == NULL) {
    accepterv_ = new ::lkvrpc::ConsensusType;
  }
  // @@protoc_insertion_point(field_mutable:simplepaxos.PaxosRecord.accepterv)
  return accepterv_;
}
::lkvrpc::ConsensusType* PaxosRecord::release_accepterv() {
  // @@protoc_insertion_point(field_release:simplepaxos.PaxosRecord.accepterv)
  
  ::lkvrpc::ConsensusType* temp = accepterv_;
  accepterv_ = NULL;
  return temp;
}
void PaxosRecord::set_allocated_accepterv(::lkvrpc::ConsensusType* accepterv) {
  delete accepterv_;
  accepterv_ = accepterv;
  if (accepterv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:simplepaxos.PaxosRecord.accepterv)
}

// optional bool confirm = 5;
void PaxosRecord::clear_confirm() {
  confirm_ = false;
}
 bool PaxosRecord::confirm() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PaxosRecord.confirm)
  return confirm_;
}
 void PaxosRecord::set_confirm(bool value) {
  
  confirm_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.PaxosRecord.confirm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace simplepaxos

// @@protoc_insertion_point(global_scope)
