// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lkv.proto

#ifndef PROTOBUF_lkv_2eproto__INCLUDED
#define PROTOBUF_lkv_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace lkvrpc {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_lkv_2eproto();
void protobuf_AssignDesc_lkv_2eproto();
void protobuf_ShutdownFile_lkv_2eproto();

class ConsensusType;
class Key;
class KeyValuePair;
class ReturnInt;
class Value;

enum ConsensusType_OpType {
  ConsensusType_OpType_OP_GET = 0,
  ConsensusType_OpType_OP_PUT = 1,
  ConsensusType_OpType_OP_DEL = 2,
  ConsensusType_OpType_ConsensusType_OpType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ConsensusType_OpType_ConsensusType_OpType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ConsensusType_OpType_IsValid(int value);
const ConsensusType_OpType ConsensusType_OpType_OpType_MIN = ConsensusType_OpType_OP_GET;
const ConsensusType_OpType ConsensusType_OpType_OpType_MAX = ConsensusType_OpType_OP_DEL;
const int ConsensusType_OpType_OpType_ARRAYSIZE = ConsensusType_OpType_OpType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConsensusType_OpType_descriptor();
inline const ::std::string& ConsensusType_OpType_Name(ConsensusType_OpType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConsensusType_OpType_descriptor(), value);
}
inline bool ConsensusType_OpType_Parse(
    const ::std::string& name, ConsensusType_OpType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConsensusType_OpType>(
    ConsensusType_OpType_descriptor(), name, value);
}
// ===================================================================

class Key : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lkvrpc.Key) */ {
 public:
  Key();
  virtual ~Key();

  Key(const Key& from);

  inline Key& operator=(const Key& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Key& default_instance();

  void Swap(Key* other);

  // implements Message ----------------------------------------------

  inline Key* New() const { return New(NULL); }

  Key* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Key& from);
  void MergeFrom(const Key& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Key* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string buf = 1;
  void clear_buf();
  static const int kBufFieldNumber = 1;
  const ::std::string& buf() const;
  void set_buf(const ::std::string& value);
  void set_buf(const char* value);
  void set_buf(const char* value, size_t size);
  ::std::string* mutable_buf();
  ::std::string* release_buf();
  void set_allocated_buf(::std::string* buf);

  // @@protoc_insertion_point(class_scope:lkvrpc.Key)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr buf_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lkv_2eproto();
  friend void protobuf_AssignDesc_lkv_2eproto();
  friend void protobuf_ShutdownFile_lkv_2eproto();

  void InitAsDefaultInstance();
  static Key* default_instance_;
};
// -------------------------------------------------------------------

class Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lkvrpc.Value) */ {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Value& default_instance();

  void Swap(Value* other);

  // implements Message ----------------------------------------------

  inline Value* New() const { return New(NULL); }

  Value* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string buf = 1;
  void clear_buf();
  static const int kBufFieldNumber = 1;
  const ::std::string& buf() const;
  void set_buf(const ::std::string& value);
  void set_buf(const char* value);
  void set_buf(const char* value, size_t size);
  ::std::string* mutable_buf();
  ::std::string* release_buf();
  void set_allocated_buf(::std::string* buf);

  // @@protoc_insertion_point(class_scope:lkvrpc.Value)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr buf_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lkv_2eproto();
  friend void protobuf_AssignDesc_lkv_2eproto();
  friend void protobuf_ShutdownFile_lkv_2eproto();

  void InitAsDefaultInstance();
  static Value* default_instance_;
};
// -------------------------------------------------------------------

class KeyValuePair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lkvrpc.KeyValuePair) */ {
 public:
  KeyValuePair();
  virtual ~KeyValuePair();

  KeyValuePair(const KeyValuePair& from);

  inline KeyValuePair& operator=(const KeyValuePair& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValuePair& default_instance();

  void Swap(KeyValuePair* other);

  // implements Message ----------------------------------------------

  inline KeyValuePair* New() const { return New(NULL); }

  KeyValuePair* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyValuePair& from);
  void MergeFrom(const KeyValuePair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeyValuePair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .lkvrpc.Key key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::lkvrpc::Key& key() const;
  ::lkvrpc::Key* mutable_key();
  ::lkvrpc::Key* release_key();
  void set_allocated_key(::lkvrpc::Key* key);

  // optional .lkvrpc.Value value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::lkvrpc::Value& value() const;
  ::lkvrpc::Value* mutable_value();
  ::lkvrpc::Value* release_value();
  void set_allocated_value(::lkvrpc::Value* value);

  // @@protoc_insertion_point(class_scope:lkvrpc.KeyValuePair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::lkvrpc::Key* key_;
  ::lkvrpc::Value* value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lkv_2eproto();
  friend void protobuf_AssignDesc_lkv_2eproto();
  friend void protobuf_ShutdownFile_lkv_2eproto();

  void InitAsDefaultInstance();
  static KeyValuePair* default_instance_;
};
// -------------------------------------------------------------------

class ReturnInt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lkvrpc.ReturnInt) */ {
 public:
  ReturnInt();
  virtual ~ReturnInt();

  ReturnInt(const ReturnInt& from);

  inline ReturnInt& operator=(const ReturnInt& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReturnInt& default_instance();

  void Swap(ReturnInt* other);

  // implements Message ----------------------------------------------

  inline ReturnInt* New() const { return New(NULL); }

  ReturnInt* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReturnInt& from);
  void MergeFrom(const ReturnInt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReturnInt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lkvrpc.ReturnInt)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 ret_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lkv_2eproto();
  friend void protobuf_AssignDesc_lkv_2eproto();
  friend void protobuf_ShutdownFile_lkv_2eproto();

  void InitAsDefaultInstance();
  static ReturnInt* default_instance_;
};
// -------------------------------------------------------------------

class ConsensusType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lkvrpc.ConsensusType) */ {
 public:
  ConsensusType();
  virtual ~ConsensusType();

  ConsensusType(const ConsensusType& from);

  inline ConsensusType& operator=(const ConsensusType& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsensusType& default_instance();

  void Swap(ConsensusType* other);

  // implements Message ----------------------------------------------

  inline ConsensusType* New() const { return New(NULL); }

  ConsensusType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConsensusType& from);
  void MergeFrom(const ConsensusType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConsensusType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ConsensusType_OpType OpType;
  static const OpType OP_GET =
    ConsensusType_OpType_OP_GET;
  static const OpType OP_PUT =
    ConsensusType_OpType_OP_PUT;
  static const OpType OP_DEL =
    ConsensusType_OpType_OP_DEL;
  static inline bool OpType_IsValid(int value) {
    return ConsensusType_OpType_IsValid(value);
  }
  static const OpType OpType_MIN =
    ConsensusType_OpType_OpType_MIN;
  static const OpType OpType_MAX =
    ConsensusType_OpType_OpType_MAX;
  static const int OpType_ARRAYSIZE =
    ConsensusType_OpType_OpType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OpType_descriptor() {
    return ConsensusType_OpType_descriptor();
  }
  static inline const ::std::string& OpType_Name(OpType value) {
    return ConsensusType_OpType_Name(value);
  }
  static inline bool OpType_Parse(const ::std::string& name,
      OpType* value) {
    return ConsensusType_OpType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .lkvrpc.ConsensusType.OpType op = 1;
  void clear_op();
  static const int kOpFieldNumber = 1;
  ::lkvrpc::ConsensusType_OpType op() const;
  void set_op(::lkvrpc::ConsensusType_OpType value);

  // optional string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:lkvrpc.ConsensusType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  int op_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lkv_2eproto();
  friend void protobuf_AssignDesc_lkv_2eproto();
  friend void protobuf_ShutdownFile_lkv_2eproto();

  void InitAsDefaultInstance();
  static ConsensusType* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Key

// optional string buf = 1;
inline void Key::clear_buf() {
  buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Key::buf() const {
  // @@protoc_insertion_point(field_get:lkvrpc.Key.buf)
  return buf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Key::set_buf(const ::std::string& value) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lkvrpc.Key.buf)
}
inline void Key::set_buf(const char* value) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lkvrpc.Key.buf)
}
inline void Key::set_buf(const char* value, size_t size) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lkvrpc.Key.buf)
}
inline ::std::string* Key::mutable_buf() {
  
  // @@protoc_insertion_point(field_mutable:lkvrpc.Key.buf)
  return buf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Key::release_buf() {
  // @@protoc_insertion_point(field_release:lkvrpc.Key.buf)
  
  return buf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Key::set_allocated_buf(::std::string* buf) {
  if (buf != NULL) {
    
  } else {
    
  }
  buf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buf);
  // @@protoc_insertion_point(field_set_allocated:lkvrpc.Key.buf)
}

// -------------------------------------------------------------------

// Value

// optional string buf = 1;
inline void Value::clear_buf() {
  buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Value::buf() const {
  // @@protoc_insertion_point(field_get:lkvrpc.Value.buf)
  return buf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Value::set_buf(const ::std::string& value) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lkvrpc.Value.buf)
}
inline void Value::set_buf(const char* value) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lkvrpc.Value.buf)
}
inline void Value::set_buf(const char* value, size_t size) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lkvrpc.Value.buf)
}
inline ::std::string* Value::mutable_buf() {
  
  // @@protoc_insertion_point(field_mutable:lkvrpc.Value.buf)
  return buf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Value::release_buf() {
  // @@protoc_insertion_point(field_release:lkvrpc.Value.buf)
  
  return buf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Value::set_allocated_buf(::std::string* buf) {
  if (buf != NULL) {
    
  } else {
    
  }
  buf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buf);
  // @@protoc_insertion_point(field_set_allocated:lkvrpc.Value.buf)
}

// -------------------------------------------------------------------

// KeyValuePair

// optional .lkvrpc.Key key = 1;
inline bool KeyValuePair::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
inline void KeyValuePair::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
inline const ::lkvrpc::Key& KeyValuePair::key() const {
  // @@protoc_insertion_point(field_get:lkvrpc.KeyValuePair.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::lkvrpc::Key* KeyValuePair::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::lkvrpc::Key;
  }
  // @@protoc_insertion_point(field_mutable:lkvrpc.KeyValuePair.key)
  return key_;
}
inline ::lkvrpc::Key* KeyValuePair::release_key() {
  // @@protoc_insertion_point(field_release:lkvrpc.KeyValuePair.key)
  
  ::lkvrpc::Key* temp = key_;
  key_ = NULL;
  return temp;
}
inline void KeyValuePair::set_allocated_key(::lkvrpc::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lkvrpc.KeyValuePair.key)
}

// optional .lkvrpc.Value value = 2;
inline bool KeyValuePair::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
inline void KeyValuePair::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
inline const ::lkvrpc::Value& KeyValuePair::value() const {
  // @@protoc_insertion_point(field_get:lkvrpc.KeyValuePair.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::lkvrpc::Value* KeyValuePair::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::lkvrpc::Value;
  }
  // @@protoc_insertion_point(field_mutable:lkvrpc.KeyValuePair.value)
  return value_;
}
inline ::lkvrpc::Value* KeyValuePair::release_value() {
  // @@protoc_insertion_point(field_release:lkvrpc.KeyValuePair.value)
  
  ::lkvrpc::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline void KeyValuePair::set_allocated_value(::lkvrpc::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lkvrpc.KeyValuePair.value)
}

// -------------------------------------------------------------------

// ReturnInt

// optional int32 ret = 1;
inline void ReturnInt::clear_ret() {
  ret_ = 0;
}
inline ::google::protobuf::int32 ReturnInt::ret() const {
  // @@protoc_insertion_point(field_get:lkvrpc.ReturnInt.ret)
  return ret_;
}
inline void ReturnInt::set_ret(::google::protobuf::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:lkvrpc.ReturnInt.ret)
}

// -------------------------------------------------------------------

// ConsensusType

// optional .lkvrpc.ConsensusType.OpType op = 1;
inline void ConsensusType::clear_op() {
  op_ = 0;
}
inline ::lkvrpc::ConsensusType_OpType ConsensusType::op() const {
  // @@protoc_insertion_point(field_get:lkvrpc.ConsensusType.op)
  return static_cast< ::lkvrpc::ConsensusType_OpType >(op_);
}
inline void ConsensusType::set_op(::lkvrpc::ConsensusType_OpType value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:lkvrpc.ConsensusType.op)
}

// optional string key = 2;
inline void ConsensusType::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConsensusType::key() const {
  // @@protoc_insertion_point(field_get:lkvrpc.ConsensusType.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusType::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lkvrpc.ConsensusType.key)
}
inline void ConsensusType::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lkvrpc.ConsensusType.key)
}
inline void ConsensusType::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lkvrpc.ConsensusType.key)
}
inline ::std::string* ConsensusType::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:lkvrpc.ConsensusType.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConsensusType::release_key() {
  // @@protoc_insertion_point(field_release:lkvrpc.ConsensusType.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusType::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:lkvrpc.ConsensusType.key)
}

// optional string value = 3;
inline void ConsensusType::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConsensusType::value() const {
  // @@protoc_insertion_point(field_get:lkvrpc.ConsensusType.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusType::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lkvrpc.ConsensusType.value)
}
inline void ConsensusType::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lkvrpc.ConsensusType.value)
}
inline void ConsensusType::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lkvrpc.ConsensusType.value)
}
inline ::std::string* ConsensusType::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:lkvrpc.ConsensusType.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConsensusType::release_value() {
  // @@protoc_insertion_point(field_release:lkvrpc.ConsensusType.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusType::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:lkvrpc.ConsensusType.value)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lkvrpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::lkvrpc::ConsensusType_OpType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lkvrpc::ConsensusType_OpType>() {
  return ::lkvrpc::ConsensusType_OpType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lkv_2eproto__INCLUDED
