// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: simple_paxos.proto

#include "simple_paxos.pb.h"
#include "simple_paxos.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace simplepaxos {

static const char* SimplePaxos_method_names[] = {
  "/simplepaxos.SimplePaxos/HandleAccept",
  "/simplepaxos.SimplePaxos/HandlePrepare",
};

std::unique_ptr< SimplePaxos::Stub> SimplePaxos::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< SimplePaxos::Stub> stub(new SimplePaxos::Stub(channel));
  return stub;
}

SimplePaxos::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_HandleAccept_(SimplePaxos_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HandlePrepare_(SimplePaxos_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SimplePaxos::Stub::HandleAccept(::grpc::ClientContext* context, const ::simplepaxos::Accept& request, ::simplepaxos::AcceptRet* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_HandleAccept_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::simplepaxos::AcceptRet>* SimplePaxos::Stub::AsyncHandleAcceptRaw(::grpc::ClientContext* context, const ::simplepaxos::Accept& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::simplepaxos::AcceptRet>(channel_.get(), cq, rpcmethod_HandleAccept_, context, request);
}

::grpc::Status SimplePaxos::Stub::HandlePrepare(::grpc::ClientContext* context, const ::simplepaxos::Prepare& request, ::simplepaxos::PrepareRet* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_HandlePrepare_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::simplepaxos::PrepareRet>* SimplePaxos::Stub::AsyncHandlePrepareRaw(::grpc::ClientContext* context, const ::simplepaxos::Prepare& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::simplepaxos::PrepareRet>(channel_.get(), cq, rpcmethod_HandlePrepare_, context, request);
}

SimplePaxos::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      SimplePaxos_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SimplePaxos::Service, ::simplepaxos::Accept, ::simplepaxos::AcceptRet>(
          std::mem_fn(&SimplePaxos::Service::HandleAccept), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SimplePaxos_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SimplePaxos::Service, ::simplepaxos::Prepare, ::simplepaxos::PrepareRet>(
          std::mem_fn(&SimplePaxos::Service::HandlePrepare), this)));
}

SimplePaxos::Service::~Service() {
}

::grpc::Status SimplePaxos::Service::HandleAccept(::grpc::ServerContext* context, const ::simplepaxos::Accept* request, ::simplepaxos::AcceptRet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimplePaxos::Service::HandlePrepare(::grpc::ServerContext* context, const ::simplepaxos::Prepare* request, ::simplepaxos::PrepareRet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace simplepaxos

