// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simple_paxos.proto

#ifndef PROTOBUF_simple_5fpaxos_2eproto__INCLUDED
#define PROTOBUF_simple_5fpaxos_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "lkv.pb.h"
// @@protoc_insertion_point(includes)

namespace simplepaxos {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_simple_5fpaxos_2eproto();
void protobuf_AssignDesc_simple_5fpaxos_2eproto();
void protobuf_ShutdownFile_simple_5fpaxos_2eproto();

class Accept;
class AcceptRet;
class PaxosRecord;
class Prepare;
class PrepareRet;

// ===================================================================

class PrepareRet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simplepaxos.PrepareRet) */ {
 public:
  PrepareRet();
  virtual ~PrepareRet();

  PrepareRet(const PrepareRet& from);

  inline PrepareRet& operator=(const PrepareRet& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareRet& default_instance();

  void Swap(PrepareRet* other);

  // implements Message ----------------------------------------------

  inline PrepareRet* New() const { return New(NULL); }

  PrepareRet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrepareRet& from);
  void MergeFrom(const PrepareRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrepareRet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 instanceid = 1;
  void clear_instanceid();
  static const int kInstanceidFieldNumber = 1;
  ::google::protobuf::uint64 instanceid() const;
  void set_instanceid(::google::protobuf::uint64 value);

  // optional uint64 proposaln = 2;
  void clear_proposaln();
  static const int kProposalnFieldNumber = 2;
  ::google::protobuf::uint64 proposaln() const;
  void set_proposaln(::google::protobuf::uint64 value);

  // optional uint64 acceptern = 3;
  void clear_acceptern();
  static const int kAccepternFieldNumber = 3;
  ::google::protobuf::uint64 acceptern() const;
  void set_acceptern(::google::protobuf::uint64 value);

  // optional .lkvrpc.ConsensusType accepterv = 4;
  bool has_accepterv() const;
  void clear_accepterv();
  static const int kAcceptervFieldNumber = 4;
  const ::lkvrpc::ConsensusType& accepterv() const;
  ::lkvrpc::ConsensusType* mutable_accepterv();
  ::lkvrpc::ConsensusType* release_accepterv();
  void set_allocated_accepterv(::lkvrpc::ConsensusType* accepterv);

  // optional bool isok = 5;
  void clear_isok();
  static const int kIsokFieldNumber = 5;
  bool isok() const;
  void set_isok(bool value);

  // optional string consenus_group = 6;
  void clear_consenus_group();
  static const int kConsenusGroupFieldNumber = 6;
  const ::std::string& consenus_group() const;
  void set_consenus_group(const ::std::string& value);
  void set_consenus_group(const char* value);
  void set_consenus_group(const char* value, size_t size);
  ::std::string* mutable_consenus_group();
  ::std::string* release_consenus_group();
  void set_allocated_consenus_group(::std::string* consenus_group);

  // @@protoc_insertion_point(class_scope:simplepaxos.PrepareRet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint64 proposaln_;
  ::google::protobuf::uint64 acceptern_;
  ::lkvrpc::ConsensusType* accepterv_;
  ::google::protobuf::internal::ArenaStringPtr consenus_group_;
  bool isok_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_simple_5fpaxos_2eproto();
  friend void protobuf_AssignDesc_simple_5fpaxos_2eproto();
  friend void protobuf_ShutdownFile_simple_5fpaxos_2eproto();

  void InitAsDefaultInstance();
  static PrepareRet* default_instance_;
};
// -------------------------------------------------------------------

class AcceptRet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simplepaxos.AcceptRet) */ {
 public:
  AcceptRet();
  virtual ~AcceptRet();

  AcceptRet(const AcceptRet& from);

  inline AcceptRet& operator=(const AcceptRet& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptRet& default_instance();

  void Swap(AcceptRet* other);

  // implements Message ----------------------------------------------

  inline AcceptRet* New() const { return New(NULL); }

  AcceptRet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AcceptRet& from);
  void MergeFrom(const AcceptRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AcceptRet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 instanceid = 1;
  void clear_instanceid();
  static const int kInstanceidFieldNumber = 1;
  ::google::protobuf::uint64 instanceid() const;
  void set_instanceid(::google::protobuf::uint64 value);

  // optional uint64 proposaln = 2;
  void clear_proposaln();
  static const int kProposalnFieldNumber = 2;
  ::google::protobuf::uint64 proposaln() const;
  void set_proposaln(::google::protobuf::uint64 value);

  // optional bool isok = 3;
  void clear_isok();
  static const int kIsokFieldNumber = 3;
  bool isok() const;
  void set_isok(bool value);

  // optional string consenus_group = 4;
  void clear_consenus_group();
  static const int kConsenusGroupFieldNumber = 4;
  const ::std::string& consenus_group() const;
  void set_consenus_group(const ::std::string& value);
  void set_consenus_group(const char* value);
  void set_consenus_group(const char* value, size_t size);
  ::std::string* mutable_consenus_group();
  ::std::string* release_consenus_group();
  void set_allocated_consenus_group(::std::string* consenus_group);

  // @@protoc_insertion_point(class_scope:simplepaxos.AcceptRet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint64 proposaln_;
  ::google::protobuf::internal::ArenaStringPtr consenus_group_;
  bool isok_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_simple_5fpaxos_2eproto();
  friend void protobuf_AssignDesc_simple_5fpaxos_2eproto();
  friend void protobuf_ShutdownFile_simple_5fpaxos_2eproto();

  void InitAsDefaultInstance();
  static AcceptRet* default_instance_;
};
// -------------------------------------------------------------------

class Prepare : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simplepaxos.Prepare) */ {
 public:
  Prepare();
  virtual ~Prepare();

  Prepare(const Prepare& from);

  inline Prepare& operator=(const Prepare& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Prepare& default_instance();

  void Swap(Prepare* other);

  // implements Message ----------------------------------------------

  inline Prepare* New() const { return New(NULL); }

  Prepare* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Prepare& from);
  void MergeFrom(const Prepare& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Prepare* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 instanceid = 1;
  void clear_instanceid();
  static const int kInstanceidFieldNumber = 1;
  ::google::protobuf::uint64 instanceid() const;
  void set_instanceid(::google::protobuf::uint64 value);

  // optional uint64 proposaln = 2;
  void clear_proposaln();
  static const int kProposalnFieldNumber = 2;
  ::google::protobuf::uint64 proposaln() const;
  void set_proposaln(::google::protobuf::uint64 value);

  // optional string consenus_group = 3;
  void clear_consenus_group();
  static const int kConsenusGroupFieldNumber = 3;
  const ::std::string& consenus_group() const;
  void set_consenus_group(const ::std::string& value);
  void set_consenus_group(const char* value);
  void set_consenus_group(const char* value, size_t size);
  ::std::string* mutable_consenus_group();
  ::std::string* release_consenus_group();
  void set_allocated_consenus_group(::std::string* consenus_group);

  // @@protoc_insertion_point(class_scope:simplepaxos.Prepare)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint64 proposaln_;
  ::google::protobuf::internal::ArenaStringPtr consenus_group_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_simple_5fpaxos_2eproto();
  friend void protobuf_AssignDesc_simple_5fpaxos_2eproto();
  friend void protobuf_ShutdownFile_simple_5fpaxos_2eproto();

  void InitAsDefaultInstance();
  static Prepare* default_instance_;
};
// -------------------------------------------------------------------

class Accept : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simplepaxos.Accept) */ {
 public:
  Accept();
  virtual ~Accept();

  Accept(const Accept& from);

  inline Accept& operator=(const Accept& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Accept& default_instance();

  void Swap(Accept* other);

  // implements Message ----------------------------------------------

  inline Accept* New() const { return New(NULL); }

  Accept* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Accept& from);
  void MergeFrom(const Accept& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Accept* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 instanceid = 1;
  void clear_instanceid();
  static const int kInstanceidFieldNumber = 1;
  ::google::protobuf::uint64 instanceid() const;
  void set_instanceid(::google::protobuf::uint64 value);

  // optional uint64 acceptern = 2;
  void clear_acceptern();
  static const int kAccepternFieldNumber = 2;
  ::google::protobuf::uint64 acceptern() const;
  void set_acceptern(::google::protobuf::uint64 value);

  // optional .lkvrpc.ConsensusType accepterv = 3;
  bool has_accepterv() const;
  void clear_accepterv();
  static const int kAcceptervFieldNumber = 3;
  const ::lkvrpc::ConsensusType& accepterv() const;
  ::lkvrpc::ConsensusType* mutable_accepterv();
  ::lkvrpc::ConsensusType* release_accepterv();
  void set_allocated_accepterv(::lkvrpc::ConsensusType* accepterv);

  // optional string consenus_group = 4;
  void clear_consenus_group();
  static const int kConsenusGroupFieldNumber = 4;
  const ::std::string& consenus_group() const;
  void set_consenus_group(const ::std::string& value);
  void set_consenus_group(const char* value);
  void set_consenus_group(const char* value, size_t size);
  ::std::string* mutable_consenus_group();
  ::std::string* release_consenus_group();
  void set_allocated_consenus_group(::std::string* consenus_group);

  // @@protoc_insertion_point(class_scope:simplepaxos.Accept)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint64 acceptern_;
  ::lkvrpc::ConsensusType* accepterv_;
  ::google::protobuf::internal::ArenaStringPtr consenus_group_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_simple_5fpaxos_2eproto();
  friend void protobuf_AssignDesc_simple_5fpaxos_2eproto();
  friend void protobuf_ShutdownFile_simple_5fpaxos_2eproto();

  void InitAsDefaultInstance();
  static Accept* default_instance_;
};
// -------------------------------------------------------------------

class PaxosRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simplepaxos.PaxosRecord) */ {
 public:
  PaxosRecord();
  virtual ~PaxosRecord();

  PaxosRecord(const PaxosRecord& from);

  inline PaxosRecord& operator=(const PaxosRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PaxosRecord& default_instance();

  void Swap(PaxosRecord* other);

  // implements Message ----------------------------------------------

  inline PaxosRecord* New() const { return New(NULL); }

  PaxosRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PaxosRecord& from);
  void MergeFrom(const PaxosRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PaxosRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 instanceid = 1;
  void clear_instanceid();
  static const int kInstanceidFieldNumber = 1;
  ::google::protobuf::uint64 instanceid() const;
  void set_instanceid(::google::protobuf::uint64 value);

  // optional uint64 proposaln = 2;
  void clear_proposaln();
  static const int kProposalnFieldNumber = 2;
  ::google::protobuf::uint64 proposaln() const;
  void set_proposaln(::google::protobuf::uint64 value);

  // optional uint64 acceptn = 3;
  void clear_acceptn();
  static const int kAcceptnFieldNumber = 3;
  ::google::protobuf::uint64 acceptn() const;
  void set_acceptn(::google::protobuf::uint64 value);

  // optional .lkvrpc.ConsensusType accepterv = 4;
  bool has_accepterv() const;
  void clear_accepterv();
  static const int kAcceptervFieldNumber = 4;
  const ::lkvrpc::ConsensusType& accepterv() const;
  ::lkvrpc::ConsensusType* mutable_accepterv();
  ::lkvrpc::ConsensusType* release_accepterv();
  void set_allocated_accepterv(::lkvrpc::ConsensusType* accepterv);

  // optional bool confirm = 5;
  void clear_confirm();
  static const int kConfirmFieldNumber = 5;
  bool confirm() const;
  void set_confirm(bool value);

  // @@protoc_insertion_point(class_scope:simplepaxos.PaxosRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint64 proposaln_;
  ::google::protobuf::uint64 acceptn_;
  ::lkvrpc::ConsensusType* accepterv_;
  bool confirm_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_simple_5fpaxos_2eproto();
  friend void protobuf_AssignDesc_simple_5fpaxos_2eproto();
  friend void protobuf_ShutdownFile_simple_5fpaxos_2eproto();

  void InitAsDefaultInstance();
  static PaxosRecord* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PrepareRet

// optional uint64 instanceid = 1;
inline void PrepareRet::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PrepareRet::instanceid() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PrepareRet.instanceid)
  return instanceid_;
}
inline void PrepareRet::set_instanceid(::google::protobuf::uint64 value) {
  
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.PrepareRet.instanceid)
}

// optional uint64 proposaln = 2;
inline void PrepareRet::clear_proposaln() {
  proposaln_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PrepareRet::proposaln() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PrepareRet.proposaln)
  return proposaln_;
}
inline void PrepareRet::set_proposaln(::google::protobuf::uint64 value) {
  
  proposaln_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.PrepareRet.proposaln)
}

// optional uint64 acceptern = 3;
inline void PrepareRet::clear_acceptern() {
  acceptern_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PrepareRet::acceptern() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PrepareRet.acceptern)
  return acceptern_;
}
inline void PrepareRet::set_acceptern(::google::protobuf::uint64 value) {
  
  acceptern_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.PrepareRet.acceptern)
}

// optional .lkvrpc.ConsensusType accepterv = 4;
inline bool PrepareRet::has_accepterv() const {
  return !_is_default_instance_ && accepterv_ != NULL;
}
inline void PrepareRet::clear_accepterv() {
  if (GetArenaNoVirtual() == NULL && accepterv_ != NULL) delete accepterv_;
  accepterv_ = NULL;
}
inline const ::lkvrpc::ConsensusType& PrepareRet::accepterv() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PrepareRet.accepterv)
  return accepterv_ != NULL ? *accepterv_ : *default_instance_->accepterv_;
}
inline ::lkvrpc::ConsensusType* PrepareRet::mutable_accepterv() {
  
  if (accepterv_ == NULL) {
    accepterv_ = new ::lkvrpc::ConsensusType;
  }
  // @@protoc_insertion_point(field_mutable:simplepaxos.PrepareRet.accepterv)
  return accepterv_;
}
inline ::lkvrpc::ConsensusType* PrepareRet::release_accepterv() {
  // @@protoc_insertion_point(field_release:simplepaxos.PrepareRet.accepterv)
  
  ::lkvrpc::ConsensusType* temp = accepterv_;
  accepterv_ = NULL;
  return temp;
}
inline void PrepareRet::set_allocated_accepterv(::lkvrpc::ConsensusType* accepterv) {
  delete accepterv_;
  accepterv_ = accepterv;
  if (accepterv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:simplepaxos.PrepareRet.accepterv)
}

// optional bool isok = 5;
inline void PrepareRet::clear_isok() {
  isok_ = false;
}
inline bool PrepareRet::isok() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PrepareRet.isok)
  return isok_;
}
inline void PrepareRet::set_isok(bool value) {
  
  isok_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.PrepareRet.isok)
}

// optional string consenus_group = 6;
inline void PrepareRet::clear_consenus_group() {
  consenus_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrepareRet::consenus_group() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PrepareRet.consenus_group)
  return consenus_group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrepareRet::set_consenus_group(const ::std::string& value) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplepaxos.PrepareRet.consenus_group)
}
inline void PrepareRet::set_consenus_group(const char* value) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplepaxos.PrepareRet.consenus_group)
}
inline void PrepareRet::set_consenus_group(const char* value, size_t size) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplepaxos.PrepareRet.consenus_group)
}
inline ::std::string* PrepareRet::mutable_consenus_group() {
  
  // @@protoc_insertion_point(field_mutable:simplepaxos.PrepareRet.consenus_group)
  return consenus_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrepareRet::release_consenus_group() {
  // @@protoc_insertion_point(field_release:simplepaxos.PrepareRet.consenus_group)
  
  return consenus_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrepareRet::set_allocated_consenus_group(::std::string* consenus_group) {
  if (consenus_group != NULL) {
    
  } else {
    
  }
  consenus_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consenus_group);
  // @@protoc_insertion_point(field_set_allocated:simplepaxos.PrepareRet.consenus_group)
}

// -------------------------------------------------------------------

// AcceptRet

// optional uint64 instanceid = 1;
inline void AcceptRet::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcceptRet::instanceid() const {
  // @@protoc_insertion_point(field_get:simplepaxos.AcceptRet.instanceid)
  return instanceid_;
}
inline void AcceptRet::set_instanceid(::google::protobuf::uint64 value) {
  
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.AcceptRet.instanceid)
}

// optional uint64 proposaln = 2;
inline void AcceptRet::clear_proposaln() {
  proposaln_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcceptRet::proposaln() const {
  // @@protoc_insertion_point(field_get:simplepaxos.AcceptRet.proposaln)
  return proposaln_;
}
inline void AcceptRet::set_proposaln(::google::protobuf::uint64 value) {
  
  proposaln_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.AcceptRet.proposaln)
}

// optional bool isok = 3;
inline void AcceptRet::clear_isok() {
  isok_ = false;
}
inline bool AcceptRet::isok() const {
  // @@protoc_insertion_point(field_get:simplepaxos.AcceptRet.isok)
  return isok_;
}
inline void AcceptRet::set_isok(bool value) {
  
  isok_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.AcceptRet.isok)
}

// optional string consenus_group = 4;
inline void AcceptRet::clear_consenus_group() {
  consenus_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcceptRet::consenus_group() const {
  // @@protoc_insertion_point(field_get:simplepaxos.AcceptRet.consenus_group)
  return consenus_group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcceptRet::set_consenus_group(const ::std::string& value) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplepaxos.AcceptRet.consenus_group)
}
inline void AcceptRet::set_consenus_group(const char* value) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplepaxos.AcceptRet.consenus_group)
}
inline void AcceptRet::set_consenus_group(const char* value, size_t size) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplepaxos.AcceptRet.consenus_group)
}
inline ::std::string* AcceptRet::mutable_consenus_group() {
  
  // @@protoc_insertion_point(field_mutable:simplepaxos.AcceptRet.consenus_group)
  return consenus_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcceptRet::release_consenus_group() {
  // @@protoc_insertion_point(field_release:simplepaxos.AcceptRet.consenus_group)
  
  return consenus_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcceptRet::set_allocated_consenus_group(::std::string* consenus_group) {
  if (consenus_group != NULL) {
    
  } else {
    
  }
  consenus_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consenus_group);
  // @@protoc_insertion_point(field_set_allocated:simplepaxos.AcceptRet.consenus_group)
}

// -------------------------------------------------------------------

// Prepare

// optional uint64 instanceid = 1;
inline void Prepare::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Prepare::instanceid() const {
  // @@protoc_insertion_point(field_get:simplepaxos.Prepare.instanceid)
  return instanceid_;
}
inline void Prepare::set_instanceid(::google::protobuf::uint64 value) {
  
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.Prepare.instanceid)
}

// optional uint64 proposaln = 2;
inline void Prepare::clear_proposaln() {
  proposaln_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Prepare::proposaln() const {
  // @@protoc_insertion_point(field_get:simplepaxos.Prepare.proposaln)
  return proposaln_;
}
inline void Prepare::set_proposaln(::google::protobuf::uint64 value) {
  
  proposaln_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.Prepare.proposaln)
}

// optional string consenus_group = 3;
inline void Prepare::clear_consenus_group() {
  consenus_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Prepare::consenus_group() const {
  // @@protoc_insertion_point(field_get:simplepaxos.Prepare.consenus_group)
  return consenus_group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Prepare::set_consenus_group(const ::std::string& value) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplepaxos.Prepare.consenus_group)
}
inline void Prepare::set_consenus_group(const char* value) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplepaxos.Prepare.consenus_group)
}
inline void Prepare::set_consenus_group(const char* value, size_t size) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplepaxos.Prepare.consenus_group)
}
inline ::std::string* Prepare::mutable_consenus_group() {
  
  // @@protoc_insertion_point(field_mutable:simplepaxos.Prepare.consenus_group)
  return consenus_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Prepare::release_consenus_group() {
  // @@protoc_insertion_point(field_release:simplepaxos.Prepare.consenus_group)
  
  return consenus_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Prepare::set_allocated_consenus_group(::std::string* consenus_group) {
  if (consenus_group != NULL) {
    
  } else {
    
  }
  consenus_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consenus_group);
  // @@protoc_insertion_point(field_set_allocated:simplepaxos.Prepare.consenus_group)
}

// -------------------------------------------------------------------

// Accept

// optional uint64 instanceid = 1;
inline void Accept::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Accept::instanceid() const {
  // @@protoc_insertion_point(field_get:simplepaxos.Accept.instanceid)
  return instanceid_;
}
inline void Accept::set_instanceid(::google::protobuf::uint64 value) {
  
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.Accept.instanceid)
}

// optional uint64 acceptern = 2;
inline void Accept::clear_acceptern() {
  acceptern_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Accept::acceptern() const {
  // @@protoc_insertion_point(field_get:simplepaxos.Accept.acceptern)
  return acceptern_;
}
inline void Accept::set_acceptern(::google::protobuf::uint64 value) {
  
  acceptern_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.Accept.acceptern)
}

// optional .lkvrpc.ConsensusType accepterv = 3;
inline bool Accept::has_accepterv() const {
  return !_is_default_instance_ && accepterv_ != NULL;
}
inline void Accept::clear_accepterv() {
  if (GetArenaNoVirtual() == NULL && accepterv_ != NULL) delete accepterv_;
  accepterv_ = NULL;
}
inline const ::lkvrpc::ConsensusType& Accept::accepterv() const {
  // @@protoc_insertion_point(field_get:simplepaxos.Accept.accepterv)
  return accepterv_ != NULL ? *accepterv_ : *default_instance_->accepterv_;
}
inline ::lkvrpc::ConsensusType* Accept::mutable_accepterv() {
  
  if (accepterv_ == NULL) {
    accepterv_ = new ::lkvrpc::ConsensusType;
  }
  // @@protoc_insertion_point(field_mutable:simplepaxos.Accept.accepterv)
  return accepterv_;
}
inline ::lkvrpc::ConsensusType* Accept::release_accepterv() {
  // @@protoc_insertion_point(field_release:simplepaxos.Accept.accepterv)
  
  ::lkvrpc::ConsensusType* temp = accepterv_;
  accepterv_ = NULL;
  return temp;
}
inline void Accept::set_allocated_accepterv(::lkvrpc::ConsensusType* accepterv) {
  delete accepterv_;
  accepterv_ = accepterv;
  if (accepterv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:simplepaxos.Accept.accepterv)
}

// optional string consenus_group = 4;
inline void Accept::clear_consenus_group() {
  consenus_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Accept::consenus_group() const {
  // @@protoc_insertion_point(field_get:simplepaxos.Accept.consenus_group)
  return consenus_group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Accept::set_consenus_group(const ::std::string& value) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplepaxos.Accept.consenus_group)
}
inline void Accept::set_consenus_group(const char* value) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplepaxos.Accept.consenus_group)
}
inline void Accept::set_consenus_group(const char* value, size_t size) {
  
  consenus_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplepaxos.Accept.consenus_group)
}
inline ::std::string* Accept::mutable_consenus_group() {
  
  // @@protoc_insertion_point(field_mutable:simplepaxos.Accept.consenus_group)
  return consenus_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Accept::release_consenus_group() {
  // @@protoc_insertion_point(field_release:simplepaxos.Accept.consenus_group)
  
  return consenus_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Accept::set_allocated_consenus_group(::std::string* consenus_group) {
  if (consenus_group != NULL) {
    
  } else {
    
  }
  consenus_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consenus_group);
  // @@protoc_insertion_point(field_set_allocated:simplepaxos.Accept.consenus_group)
}

// -------------------------------------------------------------------

// PaxosRecord

// optional uint64 instanceid = 1;
inline void PaxosRecord::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PaxosRecord::instanceid() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PaxosRecord.instanceid)
  return instanceid_;
}
inline void PaxosRecord::set_instanceid(::google::protobuf::uint64 value) {
  
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.PaxosRecord.instanceid)
}

// optional uint64 proposaln = 2;
inline void PaxosRecord::clear_proposaln() {
  proposaln_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PaxosRecord::proposaln() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PaxosRecord.proposaln)
  return proposaln_;
}
inline void PaxosRecord::set_proposaln(::google::protobuf::uint64 value) {
  
  proposaln_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.PaxosRecord.proposaln)
}

// optional uint64 acceptn = 3;
inline void PaxosRecord::clear_acceptn() {
  acceptn_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PaxosRecord::acceptn() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PaxosRecord.acceptn)
  return acceptn_;
}
inline void PaxosRecord::set_acceptn(::google::protobuf::uint64 value) {
  
  acceptn_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.PaxosRecord.acceptn)
}

// optional .lkvrpc.ConsensusType accepterv = 4;
inline bool PaxosRecord::has_accepterv() const {
  return !_is_default_instance_ && accepterv_ != NULL;
}
inline void PaxosRecord::clear_accepterv() {
  if (GetArenaNoVirtual() == NULL && accepterv_ != NULL) delete accepterv_;
  accepterv_ = NULL;
}
inline const ::lkvrpc::ConsensusType& PaxosRecord::accepterv() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PaxosRecord.accepterv)
  return accepterv_ != NULL ? *accepterv_ : *default_instance_->accepterv_;
}
inline ::lkvrpc::ConsensusType* PaxosRecord::mutable_accepterv() {
  
  if (accepterv_ == NULL) {
    accepterv_ = new ::lkvrpc::ConsensusType;
  }
  // @@protoc_insertion_point(field_mutable:simplepaxos.PaxosRecord.accepterv)
  return accepterv_;
}
inline ::lkvrpc::ConsensusType* PaxosRecord::release_accepterv() {
  // @@protoc_insertion_point(field_release:simplepaxos.PaxosRecord.accepterv)
  
  ::lkvrpc::ConsensusType* temp = accepterv_;
  accepterv_ = NULL;
  return temp;
}
inline void PaxosRecord::set_allocated_accepterv(::lkvrpc::ConsensusType* accepterv) {
  delete accepterv_;
  accepterv_ = accepterv;
  if (accepterv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:simplepaxos.PaxosRecord.accepterv)
}

// optional bool confirm = 5;
inline void PaxosRecord::clear_confirm() {
  confirm_ = false;
}
inline bool PaxosRecord::confirm() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PaxosRecord.confirm)
  return confirm_;
}
inline void PaxosRecord::set_confirm(bool value) {
  
  confirm_ = value;
  // @@protoc_insertion_point(field_set:simplepaxos.PaxosRecord.confirm)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace simplepaxos

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_simple_5fpaxos_2eproto__INCLUDED
