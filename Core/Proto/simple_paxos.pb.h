// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simple_paxos.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_simple_5fpaxos_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_simple_5fpaxos_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "lkv.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_simple_5fpaxos_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_simple_5fpaxos_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_simple_5fpaxos_2eproto;
namespace simplepaxos {
class Accept;
class AcceptDefaultTypeInternal;
extern AcceptDefaultTypeInternal _Accept_default_instance_;
class AcceptRet;
class AcceptRetDefaultTypeInternal;
extern AcceptRetDefaultTypeInternal _AcceptRet_default_instance_;
class PaxosRecord;
class PaxosRecordDefaultTypeInternal;
extern PaxosRecordDefaultTypeInternal _PaxosRecord_default_instance_;
class Prepare;
class PrepareDefaultTypeInternal;
extern PrepareDefaultTypeInternal _Prepare_default_instance_;
class PrepareRet;
class PrepareRetDefaultTypeInternal;
extern PrepareRetDefaultTypeInternal _PrepareRet_default_instance_;
}  // namespace simplepaxos
PROTOBUF_NAMESPACE_OPEN
template<> ::simplepaxos::Accept* Arena::CreateMaybeMessage<::simplepaxos::Accept>(Arena*);
template<> ::simplepaxos::AcceptRet* Arena::CreateMaybeMessage<::simplepaxos::AcceptRet>(Arena*);
template<> ::simplepaxos::PaxosRecord* Arena::CreateMaybeMessage<::simplepaxos::PaxosRecord>(Arena*);
template<> ::simplepaxos::Prepare* Arena::CreateMaybeMessage<::simplepaxos::Prepare>(Arena*);
template<> ::simplepaxos::PrepareRet* Arena::CreateMaybeMessage<::simplepaxos::PrepareRet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace simplepaxos {

// ===================================================================

class PrepareRet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simplepaxos.PrepareRet) */ {
 public:
  inline PrepareRet() : PrepareRet(nullptr) {}
  virtual ~PrepareRet();

  PrepareRet(const PrepareRet& from);
  PrepareRet(PrepareRet&& from) noexcept
    : PrepareRet() {
    *this = ::std::move(from);
  }

  inline PrepareRet& operator=(const PrepareRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareRet& operator=(PrepareRet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareRet& default_instance();

  static inline const PrepareRet* internal_default_instance() {
    return reinterpret_cast<const PrepareRet*>(
               &_PrepareRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PrepareRet& a, PrepareRet& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareRet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareRet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareRet* New() const final {
    return CreateMaybeMessage<PrepareRet>(nullptr);
  }

  PrepareRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareRet& from);
  void MergeFrom(const PrepareRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simplepaxos.PrepareRet";
  }
  protected:
  explicit PrepareRet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simple_5fpaxos_2eproto);
    return ::descriptor_table_simple_5fpaxos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsenusGroupFieldNumber = 6,
    kAcceptervFieldNumber = 4,
    kInstanceidFieldNumber = 1,
    kProposalnFieldNumber = 2,
    kAccepternFieldNumber = 3,
    kIsokFieldNumber = 5,
  };
  // string consenus_group = 6;
  void clear_consenus_group();
  const std::string& consenus_group() const;
  void set_consenus_group(const std::string& value);
  void set_consenus_group(std::string&& value);
  void set_consenus_group(const char* value);
  void set_consenus_group(const char* value, size_t size);
  std::string* mutable_consenus_group();
  std::string* release_consenus_group();
  void set_allocated_consenus_group(std::string* consenus_group);
  private:
  const std::string& _internal_consenus_group() const;
  void _internal_set_consenus_group(const std::string& value);
  std::string* _internal_mutable_consenus_group();
  public:

  // .lkvrpc.ConsensusType accepterv = 4;
  bool has_accepterv() const;
  private:
  bool _internal_has_accepterv() const;
  public:
  void clear_accepterv();
  const ::lkvrpc::ConsensusType& accepterv() const;
  ::lkvrpc::ConsensusType* release_accepterv();
  ::lkvrpc::ConsensusType* mutable_accepterv();
  void set_allocated_accepterv(::lkvrpc::ConsensusType* accepterv);
  private:
  const ::lkvrpc::ConsensusType& _internal_accepterv() const;
  ::lkvrpc::ConsensusType* _internal_mutable_accepterv();
  public:
  void unsafe_arena_set_allocated_accepterv(
      ::lkvrpc::ConsensusType* accepterv);
  ::lkvrpc::ConsensusType* unsafe_arena_release_accepterv();

  // uint64 instanceid = 1;
  void clear_instanceid();
  ::PROTOBUF_NAMESPACE_ID::uint64 instanceid() const;
  void set_instanceid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_instanceid() const;
  void _internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 proposaln = 2;
  void clear_proposaln();
  ::PROTOBUF_NAMESPACE_ID::uint64 proposaln() const;
  void set_proposaln(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_proposaln() const;
  void _internal_set_proposaln(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 acceptern = 3;
  void clear_acceptern();
  ::PROTOBUF_NAMESPACE_ID::uint64 acceptern() const;
  void set_acceptern(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_acceptern() const;
  void _internal_set_acceptern(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool isok = 5;
  void clear_isok();
  bool isok() const;
  void set_isok(bool value);
  private:
  bool _internal_isok() const;
  void _internal_set_isok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:simplepaxos.PrepareRet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consenus_group_;
  ::lkvrpc::ConsensusType* accepterv_;
  ::PROTOBUF_NAMESPACE_ID::uint64 instanceid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 proposaln_;
  ::PROTOBUF_NAMESPACE_ID::uint64 acceptern_;
  bool isok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simple_5fpaxos_2eproto;
};
// -------------------------------------------------------------------

class AcceptRet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simplepaxos.AcceptRet) */ {
 public:
  inline AcceptRet() : AcceptRet(nullptr) {}
  virtual ~AcceptRet();

  AcceptRet(const AcceptRet& from);
  AcceptRet(AcceptRet&& from) noexcept
    : AcceptRet() {
    *this = ::std::move(from);
  }

  inline AcceptRet& operator=(const AcceptRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcceptRet& operator=(AcceptRet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AcceptRet& default_instance();

  static inline const AcceptRet* internal_default_instance() {
    return reinterpret_cast<const AcceptRet*>(
               &_AcceptRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AcceptRet& a, AcceptRet& b) {
    a.Swap(&b);
  }
  inline void Swap(AcceptRet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcceptRet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcceptRet* New() const final {
    return CreateMaybeMessage<AcceptRet>(nullptr);
  }

  AcceptRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcceptRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcceptRet& from);
  void MergeFrom(const AcceptRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcceptRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simplepaxos.AcceptRet";
  }
  protected:
  explicit AcceptRet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simple_5fpaxos_2eproto);
    return ::descriptor_table_simple_5fpaxos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsenusGroupFieldNumber = 4,
    kInstanceidFieldNumber = 1,
    kProposalnFieldNumber = 2,
    kIsokFieldNumber = 3,
  };
  // string consenus_group = 4;
  void clear_consenus_group();
  const std::string& consenus_group() const;
  void set_consenus_group(const std::string& value);
  void set_consenus_group(std::string&& value);
  void set_consenus_group(const char* value);
  void set_consenus_group(const char* value, size_t size);
  std::string* mutable_consenus_group();
  std::string* release_consenus_group();
  void set_allocated_consenus_group(std::string* consenus_group);
  private:
  const std::string& _internal_consenus_group() const;
  void _internal_set_consenus_group(const std::string& value);
  std::string* _internal_mutable_consenus_group();
  public:

  // uint64 instanceid = 1;
  void clear_instanceid();
  ::PROTOBUF_NAMESPACE_ID::uint64 instanceid() const;
  void set_instanceid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_instanceid() const;
  void _internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 proposaln = 2;
  void clear_proposaln();
  ::PROTOBUF_NAMESPACE_ID::uint64 proposaln() const;
  void set_proposaln(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_proposaln() const;
  void _internal_set_proposaln(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool isok = 3;
  void clear_isok();
  bool isok() const;
  void set_isok(bool value);
  private:
  bool _internal_isok() const;
  void _internal_set_isok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:simplepaxos.AcceptRet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consenus_group_;
  ::PROTOBUF_NAMESPACE_ID::uint64 instanceid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 proposaln_;
  bool isok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simple_5fpaxos_2eproto;
};
// -------------------------------------------------------------------

class Prepare PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simplepaxos.Prepare) */ {
 public:
  inline Prepare() : Prepare(nullptr) {}
  virtual ~Prepare();

  Prepare(const Prepare& from);
  Prepare(Prepare&& from) noexcept
    : Prepare() {
    *this = ::std::move(from);
  }

  inline Prepare& operator=(const Prepare& from) {
    CopyFrom(from);
    return *this;
  }
  inline Prepare& operator=(Prepare&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Prepare& default_instance();

  static inline const Prepare* internal_default_instance() {
    return reinterpret_cast<const Prepare*>(
               &_Prepare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Prepare& a, Prepare& b) {
    a.Swap(&b);
  }
  inline void Swap(Prepare* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Prepare* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Prepare* New() const final {
    return CreateMaybeMessage<Prepare>(nullptr);
  }

  Prepare* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Prepare>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Prepare& from);
  void MergeFrom(const Prepare& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Prepare* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simplepaxos.Prepare";
  }
  protected:
  explicit Prepare(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simple_5fpaxos_2eproto);
    return ::descriptor_table_simple_5fpaxos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsenusGroupFieldNumber = 3,
    kInstanceidFieldNumber = 1,
    kProposalnFieldNumber = 2,
  };
  // string consenus_group = 3;
  void clear_consenus_group();
  const std::string& consenus_group() const;
  void set_consenus_group(const std::string& value);
  void set_consenus_group(std::string&& value);
  void set_consenus_group(const char* value);
  void set_consenus_group(const char* value, size_t size);
  std::string* mutable_consenus_group();
  std::string* release_consenus_group();
  void set_allocated_consenus_group(std::string* consenus_group);
  private:
  const std::string& _internal_consenus_group() const;
  void _internal_set_consenus_group(const std::string& value);
  std::string* _internal_mutable_consenus_group();
  public:

  // uint64 instanceid = 1;
  void clear_instanceid();
  ::PROTOBUF_NAMESPACE_ID::uint64 instanceid() const;
  void set_instanceid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_instanceid() const;
  void _internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 proposaln = 2;
  void clear_proposaln();
  ::PROTOBUF_NAMESPACE_ID::uint64 proposaln() const;
  void set_proposaln(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_proposaln() const;
  void _internal_set_proposaln(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:simplepaxos.Prepare)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consenus_group_;
  ::PROTOBUF_NAMESPACE_ID::uint64 instanceid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 proposaln_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simple_5fpaxos_2eproto;
};
// -------------------------------------------------------------------

class Accept PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simplepaxos.Accept) */ {
 public:
  inline Accept() : Accept(nullptr) {}
  virtual ~Accept();

  Accept(const Accept& from);
  Accept(Accept&& from) noexcept
    : Accept() {
    *this = ::std::move(from);
  }

  inline Accept& operator=(const Accept& from) {
    CopyFrom(from);
    return *this;
  }
  inline Accept& operator=(Accept&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Accept& default_instance();

  static inline const Accept* internal_default_instance() {
    return reinterpret_cast<const Accept*>(
               &_Accept_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Accept& a, Accept& b) {
    a.Swap(&b);
  }
  inline void Swap(Accept* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Accept* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Accept* New() const final {
    return CreateMaybeMessage<Accept>(nullptr);
  }

  Accept* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Accept>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Accept& from);
  void MergeFrom(const Accept& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Accept* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simplepaxos.Accept";
  }
  protected:
  explicit Accept(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simple_5fpaxos_2eproto);
    return ::descriptor_table_simple_5fpaxos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsenusGroupFieldNumber = 4,
    kAcceptervFieldNumber = 3,
    kInstanceidFieldNumber = 1,
    kAccepternFieldNumber = 2,
  };
  // string consenus_group = 4;
  void clear_consenus_group();
  const std::string& consenus_group() const;
  void set_consenus_group(const std::string& value);
  void set_consenus_group(std::string&& value);
  void set_consenus_group(const char* value);
  void set_consenus_group(const char* value, size_t size);
  std::string* mutable_consenus_group();
  std::string* release_consenus_group();
  void set_allocated_consenus_group(std::string* consenus_group);
  private:
  const std::string& _internal_consenus_group() const;
  void _internal_set_consenus_group(const std::string& value);
  std::string* _internal_mutable_consenus_group();
  public:

  // .lkvrpc.ConsensusType accepterv = 3;
  bool has_accepterv() const;
  private:
  bool _internal_has_accepterv() const;
  public:
  void clear_accepterv();
  const ::lkvrpc::ConsensusType& accepterv() const;
  ::lkvrpc::ConsensusType* release_accepterv();
  ::lkvrpc::ConsensusType* mutable_accepterv();
  void set_allocated_accepterv(::lkvrpc::ConsensusType* accepterv);
  private:
  const ::lkvrpc::ConsensusType& _internal_accepterv() const;
  ::lkvrpc::ConsensusType* _internal_mutable_accepterv();
  public:
  void unsafe_arena_set_allocated_accepterv(
      ::lkvrpc::ConsensusType* accepterv);
  ::lkvrpc::ConsensusType* unsafe_arena_release_accepterv();

  // uint64 instanceid = 1;
  void clear_instanceid();
  ::PROTOBUF_NAMESPACE_ID::uint64 instanceid() const;
  void set_instanceid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_instanceid() const;
  void _internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 acceptern = 2;
  void clear_acceptern();
  ::PROTOBUF_NAMESPACE_ID::uint64 acceptern() const;
  void set_acceptern(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_acceptern() const;
  void _internal_set_acceptern(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:simplepaxos.Accept)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consenus_group_;
  ::lkvrpc::ConsensusType* accepterv_;
  ::PROTOBUF_NAMESPACE_ID::uint64 instanceid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 acceptern_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simple_5fpaxos_2eproto;
};
// -------------------------------------------------------------------

class PaxosRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simplepaxos.PaxosRecord) */ {
 public:
  inline PaxosRecord() : PaxosRecord(nullptr) {}
  virtual ~PaxosRecord();

  PaxosRecord(const PaxosRecord& from);
  PaxosRecord(PaxosRecord&& from) noexcept
    : PaxosRecord() {
    *this = ::std::move(from);
  }

  inline PaxosRecord& operator=(const PaxosRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaxosRecord& operator=(PaxosRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PaxosRecord& default_instance();

  static inline const PaxosRecord* internal_default_instance() {
    return reinterpret_cast<const PaxosRecord*>(
               &_PaxosRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PaxosRecord& a, PaxosRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(PaxosRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaxosRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaxosRecord* New() const final {
    return CreateMaybeMessage<PaxosRecord>(nullptr);
  }

  PaxosRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaxosRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PaxosRecord& from);
  void MergeFrom(const PaxosRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaxosRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simplepaxos.PaxosRecord";
  }
  protected:
  explicit PaxosRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simple_5fpaxos_2eproto);
    return ::descriptor_table_simple_5fpaxos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptervFieldNumber = 5,
    kMagicFieldNumber = 1,
    kInstanceidFieldNumber = 2,
    kProposalnFieldNumber = 3,
    kAcceptnFieldNumber = 4,
    kConfirmFieldNumber = 6,
  };
  // .lkvrpc.ConsensusType accepterv = 5;
  bool has_accepterv() const;
  private:
  bool _internal_has_accepterv() const;
  public:
  void clear_accepterv();
  const ::lkvrpc::ConsensusType& accepterv() const;
  ::lkvrpc::ConsensusType* release_accepterv();
  ::lkvrpc::ConsensusType* mutable_accepterv();
  void set_allocated_accepterv(::lkvrpc::ConsensusType* accepterv);
  private:
  const ::lkvrpc::ConsensusType& _internal_accepterv() const;
  ::lkvrpc::ConsensusType* _internal_mutable_accepterv();
  public:
  void unsafe_arena_set_allocated_accepterv(
      ::lkvrpc::ConsensusType* accepterv);
  ::lkvrpc::ConsensusType* unsafe_arena_release_accepterv();

  // uint64 magic = 1;
  void clear_magic();
  ::PROTOBUF_NAMESPACE_ID::uint64 magic() const;
  void set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_magic() const;
  void _internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 instanceid = 2;
  void clear_instanceid();
  ::PROTOBUF_NAMESPACE_ID::uint64 instanceid() const;
  void set_instanceid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_instanceid() const;
  void _internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 proposaln = 3;
  void clear_proposaln();
  ::PROTOBUF_NAMESPACE_ID::uint64 proposaln() const;
  void set_proposaln(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_proposaln() const;
  void _internal_set_proposaln(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 acceptn = 4;
  void clear_acceptn();
  ::PROTOBUF_NAMESPACE_ID::uint64 acceptn() const;
  void set_acceptn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_acceptn() const;
  void _internal_set_acceptn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool confirm = 6;
  void clear_confirm();
  bool confirm() const;
  void set_confirm(bool value);
  private:
  bool _internal_confirm() const;
  void _internal_set_confirm(bool value);
  public:

  // @@protoc_insertion_point(class_scope:simplepaxos.PaxosRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::lkvrpc::ConsensusType* accepterv_;
  ::PROTOBUF_NAMESPACE_ID::uint64 magic_;
  ::PROTOBUF_NAMESPACE_ID::uint64 instanceid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 proposaln_;
  ::PROTOBUF_NAMESPACE_ID::uint64 acceptn_;
  bool confirm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simple_5fpaxos_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrepareRet

// uint64 instanceid = 1;
inline void PrepareRet::clear_instanceid() {
  instanceid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrepareRet::_internal_instanceid() const {
  return instanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrepareRet::instanceid() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PrepareRet.instanceid)
  return _internal_instanceid();
}
inline void PrepareRet::_internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  instanceid_ = value;
}
inline void PrepareRet::set_instanceid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:simplepaxos.PrepareRet.instanceid)
}

// uint64 proposaln = 2;
inline void PrepareRet::clear_proposaln() {
  proposaln_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrepareRet::_internal_proposaln() const {
  return proposaln_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrepareRet::proposaln() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PrepareRet.proposaln)
  return _internal_proposaln();
}
inline void PrepareRet::_internal_set_proposaln(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  proposaln_ = value;
}
inline void PrepareRet::set_proposaln(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_proposaln(value);
  // @@protoc_insertion_point(field_set:simplepaxos.PrepareRet.proposaln)
}

// uint64 acceptern = 3;
inline void PrepareRet::clear_acceptern() {
  acceptern_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrepareRet::_internal_acceptern() const {
  return acceptern_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrepareRet::acceptern() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PrepareRet.acceptern)
  return _internal_acceptern();
}
inline void PrepareRet::_internal_set_acceptern(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  acceptern_ = value;
}
inline void PrepareRet::set_acceptern(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_acceptern(value);
  // @@protoc_insertion_point(field_set:simplepaxos.PrepareRet.acceptern)
}

// .lkvrpc.ConsensusType accepterv = 4;
inline bool PrepareRet::_internal_has_accepterv() const {
  return this != internal_default_instance() && accepterv_ != nullptr;
}
inline bool PrepareRet::has_accepterv() const {
  return _internal_has_accepterv();
}
inline const ::lkvrpc::ConsensusType& PrepareRet::_internal_accepterv() const {
  const ::lkvrpc::ConsensusType* p = accepterv_;
  return p != nullptr ? *p : reinterpret_cast<const ::lkvrpc::ConsensusType&>(
      ::lkvrpc::_ConsensusType_default_instance_);
}
inline const ::lkvrpc::ConsensusType& PrepareRet::accepterv() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PrepareRet.accepterv)
  return _internal_accepterv();
}
inline void PrepareRet::unsafe_arena_set_allocated_accepterv(
    ::lkvrpc::ConsensusType* accepterv) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accepterv_);
  }
  accepterv_ = accepterv;
  if (accepterv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simplepaxos.PrepareRet.accepterv)
}
inline ::lkvrpc::ConsensusType* PrepareRet::release_accepterv() {
  
  ::lkvrpc::ConsensusType* temp = accepterv_;
  accepterv_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lkvrpc::ConsensusType* PrepareRet::unsafe_arena_release_accepterv() {
  // @@protoc_insertion_point(field_release:simplepaxos.PrepareRet.accepterv)
  
  ::lkvrpc::ConsensusType* temp = accepterv_;
  accepterv_ = nullptr;
  return temp;
}
inline ::lkvrpc::ConsensusType* PrepareRet::_internal_mutable_accepterv() {
  
  if (accepterv_ == nullptr) {
    auto* p = CreateMaybeMessage<::lkvrpc::ConsensusType>(GetArena());
    accepterv_ = p;
  }
  return accepterv_;
}
inline ::lkvrpc::ConsensusType* PrepareRet::mutable_accepterv() {
  // @@protoc_insertion_point(field_mutable:simplepaxos.PrepareRet.accepterv)
  return _internal_mutable_accepterv();
}
inline void PrepareRet::set_allocated_accepterv(::lkvrpc::ConsensusType* accepterv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(accepterv_);
  }
  if (accepterv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accepterv)->GetArena();
    if (message_arena != submessage_arena) {
      accepterv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accepterv, submessage_arena);
    }
    
  } else {
    
  }
  accepterv_ = accepterv;
  // @@protoc_insertion_point(field_set_allocated:simplepaxos.PrepareRet.accepterv)
}

// bool isok = 5;
inline void PrepareRet::clear_isok() {
  isok_ = false;
}
inline bool PrepareRet::_internal_isok() const {
  return isok_;
}
inline bool PrepareRet::isok() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PrepareRet.isok)
  return _internal_isok();
}
inline void PrepareRet::_internal_set_isok(bool value) {
  
  isok_ = value;
}
inline void PrepareRet::set_isok(bool value) {
  _internal_set_isok(value);
  // @@protoc_insertion_point(field_set:simplepaxos.PrepareRet.isok)
}

// string consenus_group = 6;
inline void PrepareRet::clear_consenus_group() {
  consenus_group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PrepareRet::consenus_group() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PrepareRet.consenus_group)
  return _internal_consenus_group();
}
inline void PrepareRet::set_consenus_group(const std::string& value) {
  _internal_set_consenus_group(value);
  // @@protoc_insertion_point(field_set:simplepaxos.PrepareRet.consenus_group)
}
inline std::string* PrepareRet::mutable_consenus_group() {
  // @@protoc_insertion_point(field_mutable:simplepaxos.PrepareRet.consenus_group)
  return _internal_mutable_consenus_group();
}
inline const std::string& PrepareRet::_internal_consenus_group() const {
  return consenus_group_.Get();
}
inline void PrepareRet::_internal_set_consenus_group(const std::string& value) {
  
  consenus_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PrepareRet::set_consenus_group(std::string&& value) {
  
  consenus_group_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simplepaxos.PrepareRet.consenus_group)
}
inline void PrepareRet::set_consenus_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  consenus_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:simplepaxos.PrepareRet.consenus_group)
}
inline void PrepareRet::set_consenus_group(const char* value,
    size_t size) {
  
  consenus_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simplepaxos.PrepareRet.consenus_group)
}
inline std::string* PrepareRet::_internal_mutable_consenus_group() {
  
  return consenus_group_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PrepareRet::release_consenus_group() {
  // @@protoc_insertion_point(field_release:simplepaxos.PrepareRet.consenus_group)
  return consenus_group_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrepareRet::set_allocated_consenus_group(std::string* consenus_group) {
  if (consenus_group != nullptr) {
    
  } else {
    
  }
  consenus_group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), consenus_group,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simplepaxos.PrepareRet.consenus_group)
}

// -------------------------------------------------------------------

// AcceptRet

// uint64 instanceid = 1;
inline void AcceptRet::clear_instanceid() {
  instanceid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AcceptRet::_internal_instanceid() const {
  return instanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AcceptRet::instanceid() const {
  // @@protoc_insertion_point(field_get:simplepaxos.AcceptRet.instanceid)
  return _internal_instanceid();
}
inline void AcceptRet::_internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  instanceid_ = value;
}
inline void AcceptRet::set_instanceid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:simplepaxos.AcceptRet.instanceid)
}

// uint64 proposaln = 2;
inline void AcceptRet::clear_proposaln() {
  proposaln_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AcceptRet::_internal_proposaln() const {
  return proposaln_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AcceptRet::proposaln() const {
  // @@protoc_insertion_point(field_get:simplepaxos.AcceptRet.proposaln)
  return _internal_proposaln();
}
inline void AcceptRet::_internal_set_proposaln(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  proposaln_ = value;
}
inline void AcceptRet::set_proposaln(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_proposaln(value);
  // @@protoc_insertion_point(field_set:simplepaxos.AcceptRet.proposaln)
}

// bool isok = 3;
inline void AcceptRet::clear_isok() {
  isok_ = false;
}
inline bool AcceptRet::_internal_isok() const {
  return isok_;
}
inline bool AcceptRet::isok() const {
  // @@protoc_insertion_point(field_get:simplepaxos.AcceptRet.isok)
  return _internal_isok();
}
inline void AcceptRet::_internal_set_isok(bool value) {
  
  isok_ = value;
}
inline void AcceptRet::set_isok(bool value) {
  _internal_set_isok(value);
  // @@protoc_insertion_point(field_set:simplepaxos.AcceptRet.isok)
}

// string consenus_group = 4;
inline void AcceptRet::clear_consenus_group() {
  consenus_group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AcceptRet::consenus_group() const {
  // @@protoc_insertion_point(field_get:simplepaxos.AcceptRet.consenus_group)
  return _internal_consenus_group();
}
inline void AcceptRet::set_consenus_group(const std::string& value) {
  _internal_set_consenus_group(value);
  // @@protoc_insertion_point(field_set:simplepaxos.AcceptRet.consenus_group)
}
inline std::string* AcceptRet::mutable_consenus_group() {
  // @@protoc_insertion_point(field_mutable:simplepaxos.AcceptRet.consenus_group)
  return _internal_mutable_consenus_group();
}
inline const std::string& AcceptRet::_internal_consenus_group() const {
  return consenus_group_.Get();
}
inline void AcceptRet::_internal_set_consenus_group(const std::string& value) {
  
  consenus_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AcceptRet::set_consenus_group(std::string&& value) {
  
  consenus_group_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simplepaxos.AcceptRet.consenus_group)
}
inline void AcceptRet::set_consenus_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  consenus_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:simplepaxos.AcceptRet.consenus_group)
}
inline void AcceptRet::set_consenus_group(const char* value,
    size_t size) {
  
  consenus_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simplepaxos.AcceptRet.consenus_group)
}
inline std::string* AcceptRet::_internal_mutable_consenus_group() {
  
  return consenus_group_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AcceptRet::release_consenus_group() {
  // @@protoc_insertion_point(field_release:simplepaxos.AcceptRet.consenus_group)
  return consenus_group_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AcceptRet::set_allocated_consenus_group(std::string* consenus_group) {
  if (consenus_group != nullptr) {
    
  } else {
    
  }
  consenus_group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), consenus_group,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simplepaxos.AcceptRet.consenus_group)
}

// -------------------------------------------------------------------

// Prepare

// uint64 instanceid = 1;
inline void Prepare::clear_instanceid() {
  instanceid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Prepare::_internal_instanceid() const {
  return instanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Prepare::instanceid() const {
  // @@protoc_insertion_point(field_get:simplepaxos.Prepare.instanceid)
  return _internal_instanceid();
}
inline void Prepare::_internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  instanceid_ = value;
}
inline void Prepare::set_instanceid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:simplepaxos.Prepare.instanceid)
}

// uint64 proposaln = 2;
inline void Prepare::clear_proposaln() {
  proposaln_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Prepare::_internal_proposaln() const {
  return proposaln_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Prepare::proposaln() const {
  // @@protoc_insertion_point(field_get:simplepaxos.Prepare.proposaln)
  return _internal_proposaln();
}
inline void Prepare::_internal_set_proposaln(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  proposaln_ = value;
}
inline void Prepare::set_proposaln(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_proposaln(value);
  // @@protoc_insertion_point(field_set:simplepaxos.Prepare.proposaln)
}

// string consenus_group = 3;
inline void Prepare::clear_consenus_group() {
  consenus_group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Prepare::consenus_group() const {
  // @@protoc_insertion_point(field_get:simplepaxos.Prepare.consenus_group)
  return _internal_consenus_group();
}
inline void Prepare::set_consenus_group(const std::string& value) {
  _internal_set_consenus_group(value);
  // @@protoc_insertion_point(field_set:simplepaxos.Prepare.consenus_group)
}
inline std::string* Prepare::mutable_consenus_group() {
  // @@protoc_insertion_point(field_mutable:simplepaxos.Prepare.consenus_group)
  return _internal_mutable_consenus_group();
}
inline const std::string& Prepare::_internal_consenus_group() const {
  return consenus_group_.Get();
}
inline void Prepare::_internal_set_consenus_group(const std::string& value) {
  
  consenus_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Prepare::set_consenus_group(std::string&& value) {
  
  consenus_group_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simplepaxos.Prepare.consenus_group)
}
inline void Prepare::set_consenus_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  consenus_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:simplepaxos.Prepare.consenus_group)
}
inline void Prepare::set_consenus_group(const char* value,
    size_t size) {
  
  consenus_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simplepaxos.Prepare.consenus_group)
}
inline std::string* Prepare::_internal_mutable_consenus_group() {
  
  return consenus_group_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Prepare::release_consenus_group() {
  // @@protoc_insertion_point(field_release:simplepaxos.Prepare.consenus_group)
  return consenus_group_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Prepare::set_allocated_consenus_group(std::string* consenus_group) {
  if (consenus_group != nullptr) {
    
  } else {
    
  }
  consenus_group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), consenus_group,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simplepaxos.Prepare.consenus_group)
}

// -------------------------------------------------------------------

// Accept

// uint64 instanceid = 1;
inline void Accept::clear_instanceid() {
  instanceid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Accept::_internal_instanceid() const {
  return instanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Accept::instanceid() const {
  // @@protoc_insertion_point(field_get:simplepaxos.Accept.instanceid)
  return _internal_instanceid();
}
inline void Accept::_internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  instanceid_ = value;
}
inline void Accept::set_instanceid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:simplepaxos.Accept.instanceid)
}

// uint64 acceptern = 2;
inline void Accept::clear_acceptern() {
  acceptern_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Accept::_internal_acceptern() const {
  return acceptern_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Accept::acceptern() const {
  // @@protoc_insertion_point(field_get:simplepaxos.Accept.acceptern)
  return _internal_acceptern();
}
inline void Accept::_internal_set_acceptern(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  acceptern_ = value;
}
inline void Accept::set_acceptern(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_acceptern(value);
  // @@protoc_insertion_point(field_set:simplepaxos.Accept.acceptern)
}

// .lkvrpc.ConsensusType accepterv = 3;
inline bool Accept::_internal_has_accepterv() const {
  return this != internal_default_instance() && accepterv_ != nullptr;
}
inline bool Accept::has_accepterv() const {
  return _internal_has_accepterv();
}
inline const ::lkvrpc::ConsensusType& Accept::_internal_accepterv() const {
  const ::lkvrpc::ConsensusType* p = accepterv_;
  return p != nullptr ? *p : reinterpret_cast<const ::lkvrpc::ConsensusType&>(
      ::lkvrpc::_ConsensusType_default_instance_);
}
inline const ::lkvrpc::ConsensusType& Accept::accepterv() const {
  // @@protoc_insertion_point(field_get:simplepaxos.Accept.accepterv)
  return _internal_accepterv();
}
inline void Accept::unsafe_arena_set_allocated_accepterv(
    ::lkvrpc::ConsensusType* accepterv) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accepterv_);
  }
  accepterv_ = accepterv;
  if (accepterv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simplepaxos.Accept.accepterv)
}
inline ::lkvrpc::ConsensusType* Accept::release_accepterv() {
  
  ::lkvrpc::ConsensusType* temp = accepterv_;
  accepterv_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lkvrpc::ConsensusType* Accept::unsafe_arena_release_accepterv() {
  // @@protoc_insertion_point(field_release:simplepaxos.Accept.accepterv)
  
  ::lkvrpc::ConsensusType* temp = accepterv_;
  accepterv_ = nullptr;
  return temp;
}
inline ::lkvrpc::ConsensusType* Accept::_internal_mutable_accepterv() {
  
  if (accepterv_ == nullptr) {
    auto* p = CreateMaybeMessage<::lkvrpc::ConsensusType>(GetArena());
    accepterv_ = p;
  }
  return accepterv_;
}
inline ::lkvrpc::ConsensusType* Accept::mutable_accepterv() {
  // @@protoc_insertion_point(field_mutable:simplepaxos.Accept.accepterv)
  return _internal_mutable_accepterv();
}
inline void Accept::set_allocated_accepterv(::lkvrpc::ConsensusType* accepterv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(accepterv_);
  }
  if (accepterv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accepterv)->GetArena();
    if (message_arena != submessage_arena) {
      accepterv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accepterv, submessage_arena);
    }
    
  } else {
    
  }
  accepterv_ = accepterv;
  // @@protoc_insertion_point(field_set_allocated:simplepaxos.Accept.accepterv)
}

// string consenus_group = 4;
inline void Accept::clear_consenus_group() {
  consenus_group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Accept::consenus_group() const {
  // @@protoc_insertion_point(field_get:simplepaxos.Accept.consenus_group)
  return _internal_consenus_group();
}
inline void Accept::set_consenus_group(const std::string& value) {
  _internal_set_consenus_group(value);
  // @@protoc_insertion_point(field_set:simplepaxos.Accept.consenus_group)
}
inline std::string* Accept::mutable_consenus_group() {
  // @@protoc_insertion_point(field_mutable:simplepaxos.Accept.consenus_group)
  return _internal_mutable_consenus_group();
}
inline const std::string& Accept::_internal_consenus_group() const {
  return consenus_group_.Get();
}
inline void Accept::_internal_set_consenus_group(const std::string& value) {
  
  consenus_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Accept::set_consenus_group(std::string&& value) {
  
  consenus_group_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simplepaxos.Accept.consenus_group)
}
inline void Accept::set_consenus_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  consenus_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:simplepaxos.Accept.consenus_group)
}
inline void Accept::set_consenus_group(const char* value,
    size_t size) {
  
  consenus_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simplepaxos.Accept.consenus_group)
}
inline std::string* Accept::_internal_mutable_consenus_group() {
  
  return consenus_group_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Accept::release_consenus_group() {
  // @@protoc_insertion_point(field_release:simplepaxos.Accept.consenus_group)
  return consenus_group_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Accept::set_allocated_consenus_group(std::string* consenus_group) {
  if (consenus_group != nullptr) {
    
  } else {
    
  }
  consenus_group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), consenus_group,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simplepaxos.Accept.consenus_group)
}

// -------------------------------------------------------------------

// PaxosRecord

// uint64 magic = 1;
inline void PaxosRecord::clear_magic() {
  magic_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PaxosRecord::_internal_magic() const {
  return magic_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PaxosRecord::magic() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PaxosRecord.magic)
  return _internal_magic();
}
inline void PaxosRecord::_internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  magic_ = value;
}
inline void PaxosRecord::set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:simplepaxos.PaxosRecord.magic)
}

// uint64 instanceid = 2;
inline void PaxosRecord::clear_instanceid() {
  instanceid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PaxosRecord::_internal_instanceid() const {
  return instanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PaxosRecord::instanceid() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PaxosRecord.instanceid)
  return _internal_instanceid();
}
inline void PaxosRecord::_internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  instanceid_ = value;
}
inline void PaxosRecord::set_instanceid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:simplepaxos.PaxosRecord.instanceid)
}

// uint64 proposaln = 3;
inline void PaxosRecord::clear_proposaln() {
  proposaln_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PaxosRecord::_internal_proposaln() const {
  return proposaln_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PaxosRecord::proposaln() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PaxosRecord.proposaln)
  return _internal_proposaln();
}
inline void PaxosRecord::_internal_set_proposaln(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  proposaln_ = value;
}
inline void PaxosRecord::set_proposaln(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_proposaln(value);
  // @@protoc_insertion_point(field_set:simplepaxos.PaxosRecord.proposaln)
}

// uint64 acceptn = 4;
inline void PaxosRecord::clear_acceptn() {
  acceptn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PaxosRecord::_internal_acceptn() const {
  return acceptn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PaxosRecord::acceptn() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PaxosRecord.acceptn)
  return _internal_acceptn();
}
inline void PaxosRecord::_internal_set_acceptn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  acceptn_ = value;
}
inline void PaxosRecord::set_acceptn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_acceptn(value);
  // @@protoc_insertion_point(field_set:simplepaxos.PaxosRecord.acceptn)
}

// .lkvrpc.ConsensusType accepterv = 5;
inline bool PaxosRecord::_internal_has_accepterv() const {
  return this != internal_default_instance() && accepterv_ != nullptr;
}
inline bool PaxosRecord::has_accepterv() const {
  return _internal_has_accepterv();
}
inline const ::lkvrpc::ConsensusType& PaxosRecord::_internal_accepterv() const {
  const ::lkvrpc::ConsensusType* p = accepterv_;
  return p != nullptr ? *p : reinterpret_cast<const ::lkvrpc::ConsensusType&>(
      ::lkvrpc::_ConsensusType_default_instance_);
}
inline const ::lkvrpc::ConsensusType& PaxosRecord::accepterv() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PaxosRecord.accepterv)
  return _internal_accepterv();
}
inline void PaxosRecord::unsafe_arena_set_allocated_accepterv(
    ::lkvrpc::ConsensusType* accepterv) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accepterv_);
  }
  accepterv_ = accepterv;
  if (accepterv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simplepaxos.PaxosRecord.accepterv)
}
inline ::lkvrpc::ConsensusType* PaxosRecord::release_accepterv() {
  
  ::lkvrpc::ConsensusType* temp = accepterv_;
  accepterv_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lkvrpc::ConsensusType* PaxosRecord::unsafe_arena_release_accepterv() {
  // @@protoc_insertion_point(field_release:simplepaxos.PaxosRecord.accepterv)
  
  ::lkvrpc::ConsensusType* temp = accepterv_;
  accepterv_ = nullptr;
  return temp;
}
inline ::lkvrpc::ConsensusType* PaxosRecord::_internal_mutable_accepterv() {
  
  if (accepterv_ == nullptr) {
    auto* p = CreateMaybeMessage<::lkvrpc::ConsensusType>(GetArena());
    accepterv_ = p;
  }
  return accepterv_;
}
inline ::lkvrpc::ConsensusType* PaxosRecord::mutable_accepterv() {
  // @@protoc_insertion_point(field_mutable:simplepaxos.PaxosRecord.accepterv)
  return _internal_mutable_accepterv();
}
inline void PaxosRecord::set_allocated_accepterv(::lkvrpc::ConsensusType* accepterv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(accepterv_);
  }
  if (accepterv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accepterv)->GetArena();
    if (message_arena != submessage_arena) {
      accepterv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accepterv, submessage_arena);
    }
    
  } else {
    
  }
  accepterv_ = accepterv;
  // @@protoc_insertion_point(field_set_allocated:simplepaxos.PaxosRecord.accepterv)
}

// bool confirm = 6;
inline void PaxosRecord::clear_confirm() {
  confirm_ = false;
}
inline bool PaxosRecord::_internal_confirm() const {
  return confirm_;
}
inline bool PaxosRecord::confirm() const {
  // @@protoc_insertion_point(field_get:simplepaxos.PaxosRecord.confirm)
  return _internal_confirm();
}
inline void PaxosRecord::_internal_set_confirm(bool value) {
  
  confirm_ = value;
}
inline void PaxosRecord::set_confirm(bool value) {
  _internal_set_confirm(value);
  // @@protoc_insertion_point(field_set:simplepaxos.PaxosRecord.confirm)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace simplepaxos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_simple_5fpaxos_2eproto
