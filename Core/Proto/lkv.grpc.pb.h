// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: lkv.proto
#ifndef GRPC_lkv_2eproto__INCLUDED
#define GRPC_lkv_2eproto__INCLUDED

#include "lkv.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace lkvrpc {

class LKV final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::lkvrpc::Key& request, ::lkvrpc::Value* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lkvrpc::Value>> AsyncGet(::grpc::ClientContext* context, const ::lkvrpc::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lkvrpc::Value>>(AsyncGetRaw(context, request, cq));
    }
    virtual ::grpc::Status Put(::grpc::ClientContext* context, const ::lkvrpc::KeyValuePair& request, ::lkvrpc::ReturnInt* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lkvrpc::ReturnInt>> AsyncPut(::grpc::ClientContext* context, const ::lkvrpc::KeyValuePair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lkvrpc::ReturnInt>>(AsyncPutRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::lkvrpc::Key& request, ::lkvrpc::ReturnInt* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lkvrpc::ReturnInt>> AsyncDelete(::grpc::ClientContext* context, const ::lkvrpc::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lkvrpc::ReturnInt>>(AsyncDeleteRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lkvrpc::Value>* AsyncGetRaw(::grpc::ClientContext* context, const ::lkvrpc::Key& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lkvrpc::ReturnInt>* AsyncPutRaw(::grpc::ClientContext* context, const ::lkvrpc::KeyValuePair& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lkvrpc::ReturnInt>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::lkvrpc::Key& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Get(::grpc::ClientContext* context, const ::lkvrpc::Key& request, ::lkvrpc::Value* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lkvrpc::Value>> AsyncGet(::grpc::ClientContext* context, const ::lkvrpc::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lkvrpc::Value>>(AsyncGetRaw(context, request, cq));
    }
    ::grpc::Status Put(::grpc::ClientContext* context, const ::lkvrpc::KeyValuePair& request, ::lkvrpc::ReturnInt* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lkvrpc::ReturnInt>> AsyncPut(::grpc::ClientContext* context, const ::lkvrpc::KeyValuePair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lkvrpc::ReturnInt>>(AsyncPutRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::lkvrpc::Key& request, ::lkvrpc::ReturnInt* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lkvrpc::ReturnInt>> AsyncDelete(::grpc::ClientContext* context, const ::lkvrpc::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lkvrpc::ReturnInt>>(AsyncDeleteRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::lkvrpc::Value>* AsyncGetRaw(::grpc::ClientContext* context, const ::lkvrpc::Key& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lkvrpc::ReturnInt>* AsyncPutRaw(::grpc::ClientContext* context, const ::lkvrpc::KeyValuePair& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lkvrpc::ReturnInt>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::lkvrpc::Key& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_Get_;
    const ::grpc::RpcMethod rpcmethod_Put_;
    const ::grpc::RpcMethod rpcmethod_Delete_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::lkvrpc::Key* request, ::lkvrpc::Value* response);
    virtual ::grpc::Status Put(::grpc::ServerContext* context, const ::lkvrpc::KeyValuePair* request, ::lkvrpc::ReturnInt* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::lkvrpc::Key* request, ::lkvrpc::ReturnInt* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::lkvrpc::Key* request, ::lkvrpc::Value* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::lkvrpc::Key* request, ::grpc::ServerAsyncResponseWriter< ::lkvrpc::Value>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Put() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* context, const ::lkvrpc::KeyValuePair* request, ::lkvrpc::ReturnInt* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPut(::grpc::ServerContext* context, ::lkvrpc::KeyValuePair* request, ::grpc::ServerAsyncResponseWriter< ::lkvrpc::ReturnInt>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::lkvrpc::Key* request, ::lkvrpc::ReturnInt* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::lkvrpc::Key* request, ::grpc::ServerAsyncResponseWriter< ::lkvrpc::ReturnInt>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Get<WithAsyncMethod_Put<WithAsyncMethod_Delete<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::lkvrpc::Key* request, ::lkvrpc::Value* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Put() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* context, const ::lkvrpc::KeyValuePair* request, ::lkvrpc::ReturnInt* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::lkvrpc::Key* request, ::lkvrpc::ReturnInt* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::lkvrpc::Key, ::lkvrpc::Value>(std::bind(&WithStreamedUnaryMethod_Get<BaseClass>::StreamedGet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::lkvrpc::Key* request, ::lkvrpc::Value* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lkvrpc::Key,::lkvrpc::Value>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Put() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::lkvrpc::KeyValuePair, ::lkvrpc::ReturnInt>(std::bind(&WithStreamedUnaryMethod_Put<BaseClass>::StreamedPut, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Put(::grpc::ServerContext* context, const ::lkvrpc::KeyValuePair* request, ::lkvrpc::ReturnInt* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lkvrpc::KeyValuePair,::lkvrpc::ReturnInt>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::lkvrpc::Key, ::lkvrpc::ReturnInt>(std::bind(&WithStreamedUnaryMethod_Delete<BaseClass>::StreamedDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::lkvrpc::Key* request, ::lkvrpc::ReturnInt* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lkvrpc::Key,::lkvrpc::ReturnInt>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Put<WithStreamedUnaryMethod_Delete<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Put<WithStreamedUnaryMethod_Delete<Service > > > StreamedService;
};

}  // namespace lkvrpc


#endif  // GRPC_lkv_2eproto__INCLUDED
